{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Represents a plugin’s warning. It can be created using {@link Node#warn}.\n *\n * @example\n * if ( decl.important ) {\n *     decl.warn(result, 'Avoid !important', { word: '!important' });\n * }\n */\nvar Warning = function () {\n  /**\n   * @param {string} text        - warning message\n   * @param {Object} [opts]      - warning options\n   * @param {Node}   opts.node   - CSS node that caused the warning\n   * @param {string} opts.word   - word in CSS source that caused the warning\n   * @param {number} opts.index  - index in CSS node string that caused\n   *                               the warning\n   * @param {string} opts.plugin - name of the plugin that created\n   *                               this warning. {@link Result#warn} fills\n   *                               this property automatically.\n   */\n  function Warning(text) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Warning);\n\n    /**\n     * @member {string} - Type to filter warnings from\n     *                    {@link Result#messages}. Always equal\n     *                    to `\"warning\"`.\n     *\n     * @example\n     * const nonWarning = result.messages.filter(i => i.type !== 'warning')\n     */\n    this.type = 'warning';\n    /**\n     * @member {string} - The warning message.\n     *\n     * @example\n     * warning.text //=> 'Try to avoid !important'\n     */\n    this.text = text;\n    if (opts.node && opts.node.source) {\n      var pos = opts.node.positionBy(opts);\n      /**\n       * @member {number} - Line in the input file\n       *                    with this warning’s source\n       *\n       * @example\n       * warning.line //=> 5\n       */\n      this.line = pos.line;\n      /**\n       * @member {number} - Column in the input file\n       *                    with this warning’s source.\n       *\n       * @example\n       * warning.column //=> 6\n       */\n      this.column = pos.column;\n    }\n    for (var opt in opts) {\n      this[opt] = opts[opt];\n    }\n  }\n\n  /**\n   * Returns a warning position and message.\n   *\n   * @example\n   * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'\n   *\n   * @return {string} warning position and message\n   */\n\n  Warning.prototype.toString = function toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message;\n    } else if (this.plugin) {\n      return this.plugin + ': ' + this.text;\n    } else {\n      return this.text;\n    }\n  };\n\n  /**\n   * @memberof Warning#\n   * @member {string} plugin - The name of the plugin that created\n   *                           it will fill this property automatically.\n   *                           this warning. When you call {@link Node#warn}\n   *\n   * @example\n   * warning.plugin //=> 'postcss-important'\n   */\n\n  /**\n   * @memberof Warning#\n   * @member {Node} node - Contains the CSS node that caused the warning.\n   *\n   * @example\n   * warning.node.toString() //=> 'color: white !important'\n   */\n\n  return Warning;\n}();\nexports.default = Warning;\nmodule.exports = exports['default'];","map":{"version":3,"names":["Warning","text","opts","arguments","length","undefined","_classCallCheck","type","node","source","pos","positionBy","line","column","opt","toString","error","plugin","index","word","message"],"sources":["C:\\Users\\Francisco\\Documents\\GitHub\\examenApi\\EXAMEN-API-NOTICIAS\\node_modules\\postcss-functions\\node_modules\\postcss\\lib\\warning.es6"],"sourcesContent":["/**\n * Represents a plugin’s warning. It can be created using {@link Node#warn}.\n *\n * @example\n * if ( decl.important ) {\n *     decl.warn(result, 'Avoid !important', { word: '!important' });\n * }\n */\nclass Warning {\n\n    /**\n     * @param {string} text        - warning message\n     * @param {Object} [opts]      - warning options\n     * @param {Node}   opts.node   - CSS node that caused the warning\n     * @param {string} opts.word   - word in CSS source that caused the warning\n     * @param {number} opts.index  - index in CSS node string that caused\n     *                               the warning\n     * @param {string} opts.plugin - name of the plugin that created\n     *                               this warning. {@link Result#warn} fills\n     *                               this property automatically.\n     */\n    constructor(text, opts = { }) {\n        /**\n         * @member {string} - Type to filter warnings from\n         *                    {@link Result#messages}. Always equal\n         *                    to `\"warning\"`.\n         *\n         * @example\n         * const nonWarning = result.messages.filter(i => i.type !== 'warning')\n         */\n        this.type = 'warning';\n        /**\n         * @member {string} - The warning message.\n         *\n         * @example\n         * warning.text //=> 'Try to avoid !important'\n         */\n        this.text = text;\n\n        if ( opts.node && opts.node.source ) {\n            let pos     = opts.node.positionBy(opts);\n            /**\n             * @member {number} - Line in the input file\n             *                    with this warning’s source\n             *\n             * @example\n             * warning.line //=> 5\n             */\n            this.line   = pos.line;\n            /**\n             * @member {number} - Column in the input file\n             *                    with this warning’s source.\n             *\n             * @example\n             * warning.column //=> 6\n             */\n            this.column = pos.column;\n        }\n\n        for ( let opt in opts ) this[opt] = opts[opt];\n    }\n\n    /**\n     * Returns a warning position and message.\n     *\n     * @example\n     * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'\n     *\n     * @return {string} warning position and message\n     */\n    toString() {\n        if ( this.node ) {\n            return this.node.error(this.text, {\n                plugin: this.plugin,\n                index:  this.index,\n                word:   this.word\n            }).message;\n        } else if ( this.plugin ) {\n            return this.plugin + ': ' + this.text;\n        } else {\n            return this.text;\n        }\n    }\n\n    /**\n     * @memberof Warning#\n     * @member {string} plugin - The name of the plugin that created\n     *                           it will fill this property automatically.\n     *                           this warning. When you call {@link Node#warn}\n     *\n     * @example\n     * warning.plugin //=> 'postcss-important'\n     */\n\n    /**\n     * @memberof Warning#\n     * @member {Node} node - Contains the CSS node that caused the warning.\n     *\n     * @example\n     * warning.node.toString() //=> 'color: white !important'\n     */\n\n}\n\nexport default Warning;\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;IAQMA,O;EAEF;;;;;;;;;;;EAWA,SAAAA,QAAYC,IAAZ,EAA8B;IAAA,IAAZC,IAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAL,EAAK;IAAAG,eAAA,OAAAN,OAAA;;IAC1B;;;;;;;;IAQA,KAAKO,IAAL,GAAY,SAAZ;IACA;;;;;;IAMA,KAAKN,IAAL,GAAYA,IAAZ;IAEA,IAAKC,IAAA,CAAKM,IAAL,IAAaN,IAAA,CAAKM,IAAL,CAAUC,MAA5B,EAAqC;MACjC,IAAIC,GAAA,GAAUR,IAAA,CAAKM,IAAL,CAAUG,UAAV,CAAqBT,IAArB,CAAd;MACA;;;;;;;MAOA,KAAKU,IAAL,GAAcF,GAAA,CAAIE,IAAlB;MACA;;;;;;;MAOA,KAAKC,MAAL,GAAcH,GAAA,CAAIG,MAAlB;IACH;IAED,KAAM,IAAIC,GAAV,IAAiBZ,IAAjB;MAAwB,KAAKY,GAAL,IAAYZ,IAAA,CAAKY,GAAL,CAAZ;IAAxB;EACH;;EAED;;;;;;;;;oBAQAC,Q,uBAAW;IACP,IAAK,KAAKP,IAAV,EAAiB;MACb,OAAO,KAAKA,IAAL,CAAUQ,KAAV,CAAgB,KAAKf,IAArB,EAA2B;QAC9BgB,MAAA,EAAQ,KAAKA,MADiB;QAE9BC,KAAA,EAAQ,KAAKA,KAFiB;QAG9BC,IAAA,EAAQ,KAAKA;MAHiB,CAA3B,EAIJC,OAJH;IAKH,CAND,MAMO,IAAK,KAAKH,MAAV,EAAmB;MACtB,OAAO,KAAKA,MAAL,GAAc,IAAd,GAAqB,KAAKhB,IAAjC;IACH,CAFM,MAEA;MACH,OAAO,KAAKA,IAAZ;IACH;EACJ,C;;EAED;;;;;;;;;;EAUA;;;;;;;;;;kBAUWD,O"},"metadata":{},"sourceType":"script","externalDependencies":[]}