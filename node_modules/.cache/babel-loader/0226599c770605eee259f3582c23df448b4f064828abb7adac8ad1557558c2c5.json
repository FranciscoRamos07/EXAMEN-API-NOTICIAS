{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar defaultRaw = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' '\n};\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}\nvar Stringifier = function () {\n  function Stringifier(builder) {\n    _classCallCheck(this, Stringifier);\n    this.builder = builder;\n  }\n  Stringifier.prototype.stringify = function stringify(node, semicolon) {\n    this[node.type](node, semicolon);\n  };\n  Stringifier.prototype.root = function root(node) {\n    this.body(node);\n    if (node.raws.after) this.builder(node.raws.after);\n  };\n  Stringifier.prototype.comment = function comment(node) {\n    var left = this.raw(node, 'left', 'commentLeft');\n    var right = this.raw(node, 'right', 'commentRight');\n    this.builder('/*' + left + node.text + right + '*/', node);\n  };\n  Stringifier.prototype.decl = function decl(node, semicolon) {\n    var between = this.raw(node, 'between', 'colon');\n    var string = node.prop + between + this.rawValue(node, 'value');\n    if (node.important) {\n      string += node.raws.important || ' !important';\n    }\n    if (semicolon) string += ';';\n    this.builder(string, node);\n  };\n  Stringifier.prototype.rule = function rule(node) {\n    this.block(node, this.rawValue(node, 'selector'));\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end');\n    }\n  };\n  Stringifier.prototype.atrule = function atrule(node, semicolon) {\n    var name = '@' + node.name;\n    var params = node.params ? this.rawValue(node, 'params') : '';\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName;\n    } else if (params) {\n      name += ' ';\n    }\n    if (node.nodes) {\n      this.block(node, name + params);\n    } else {\n      var end = (node.raws.between || '') + (semicolon ? ';' : '');\n      this.builder(name + params + end, node);\n    }\n  };\n  Stringifier.prototype.body = function body(node) {\n    var last = node.nodes.length - 1;\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break;\n      last -= 1;\n    }\n    var semicolon = this.raw(node, 'semicolon');\n    for (var i = 0; i < node.nodes.length; i++) {\n      var child = node.nodes[i];\n      var before = this.raw(child, 'before');\n      if (before) this.builder(before);\n      this.stringify(child, last !== i || semicolon);\n    }\n  };\n  Stringifier.prototype.block = function block(node, start) {\n    var between = this.raw(node, 'between', 'beforeOpen');\n    this.builder(start + between + '{', node, 'start');\n    var after = void 0;\n    if (node.nodes && node.nodes.length) {\n      this.body(node);\n      after = this.raw(node, 'after');\n    } else {\n      after = this.raw(node, 'after', 'emptyBody');\n    }\n    if (after) this.builder(after);\n    this.builder('}', node, 'end');\n  };\n  Stringifier.prototype.raw = function raw(node, own, detect) {\n    var value = void 0;\n    if (!detect) detect = own;\n\n    // Already had\n    if (own) {\n      value = node.raws[own];\n      if (typeof value !== 'undefined') return value;\n    }\n    var parent = node.parent;\n\n    // Hack for first rule in CSS\n    if (detect === 'before') {\n      if (!parent || parent.type === 'root' && parent.first === node) {\n        return '';\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return defaultRaw[detect];\n\n    // Detect style by other nodes\n    var root = node.root();\n    if (!root.rawCache) root.rawCache = {};\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect];\n    }\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect);\n    } else {\n      var method = 'raw' + capitalize(detect);\n      if (this[method]) {\n        value = this[method](root, node);\n      } else {\n        root.walk(function (i) {\n          value = i.raws[own];\n          if (typeof value !== 'undefined') return false;\n        });\n      }\n    }\n    if (typeof value === 'undefined') value = defaultRaw[detect];\n    root.rawCache[detect] = value;\n    return value;\n  };\n  Stringifier.prototype.rawSemicolon = function rawSemicolon(root) {\n    var value = void 0;\n    root.walk(function (i) {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon;\n        if (typeof value !== 'undefined') return false;\n      }\n    });\n    return value;\n  };\n  Stringifier.prototype.rawEmptyBody = function rawEmptyBody(root) {\n    var value = void 0;\n    root.walk(function (i) {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after;\n        if (typeof value !== 'undefined') return false;\n      }\n    });\n    return value;\n  };\n  Stringifier.prototype.rawIndent = function rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent;\n    var value = void 0;\n    root.walk(function (i) {\n      var p = i.parent;\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          var parts = i.raws.before.split('\\n');\n          value = parts[parts.length - 1];\n          value = value.replace(/[^\\s]/g, '');\n          return false;\n        }\n      }\n    });\n    return value;\n  };\n  Stringifier.prototype.rawBeforeComment = function rawBeforeComment(root, node) {\n    var value = void 0;\n    root.walkComments(function (i) {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before;\n        if (value.indexOf('\\n') !== -1) {\n          value = value.replace(/[^\\n]+$/, '');\n        }\n        return false;\n      }\n    });\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl');\n    } else if (value) {\n      value = value.replace(/[^\\s]/g, '');\n    }\n    return value;\n  };\n  Stringifier.prototype.rawBeforeDecl = function rawBeforeDecl(root, node) {\n    var value = void 0;\n    root.walkDecls(function (i) {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before;\n        if (value.indexOf('\\n') !== -1) {\n          value = value.replace(/[^\\n]+$/, '');\n        }\n        return false;\n      }\n    });\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule');\n    } else if (value) {\n      value = value.replace(/[^\\s]/g, '');\n    }\n    return value;\n  };\n  Stringifier.prototype.rawBeforeRule = function rawBeforeRule(root) {\n    var value = void 0;\n    root.walk(function (i) {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before;\n          if (value.indexOf('\\n') !== -1) {\n            value = value.replace(/[^\\n]+$/, '');\n          }\n          return false;\n        }\n      }\n    });\n    if (value) value = value.replace(/[^\\s]/g, '');\n    return value;\n  };\n  Stringifier.prototype.rawBeforeClose = function rawBeforeClose(root) {\n    var value = void 0;\n    root.walk(function (i) {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after;\n          if (value.indexOf('\\n') !== -1) {\n            value = value.replace(/[^\\n]+$/, '');\n          }\n          return false;\n        }\n      }\n    });\n    if (value) value = value.replace(/[^\\s]/g, '');\n    return value;\n  };\n  Stringifier.prototype.rawBeforeOpen = function rawBeforeOpen(root) {\n    var value = void 0;\n    root.walk(function (i) {\n      if (i.type !== 'decl') {\n        value = i.raws.between;\n        if (typeof value !== 'undefined') return false;\n      }\n    });\n    return value;\n  };\n  Stringifier.prototype.rawColon = function rawColon(root) {\n    var value = void 0;\n    root.walkDecls(function (i) {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '');\n        return false;\n      }\n    });\n    return value;\n  };\n  Stringifier.prototype.beforeAfter = function beforeAfter(node, detect) {\n    var value = void 0;\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl');\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment');\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule');\n    } else {\n      value = this.raw(node, null, 'beforeClose');\n    }\n    var buf = node.parent;\n    var depth = 0;\n    while (buf && buf.type !== 'root') {\n      depth += 1;\n      buf = buf.parent;\n    }\n    if (value.indexOf('\\n') !== -1) {\n      var indent = this.raw(node, null, 'indent');\n      if (indent.length) {\n        for (var step = 0; step < depth; step++) {\n          value += indent;\n        }\n      }\n    }\n    return value;\n  };\n  Stringifier.prototype.rawValue = function rawValue(node, prop) {\n    var value = node[prop];\n    var raw = node.raws[prop];\n    if (raw && raw.value === value) {\n      return raw.raw;\n    } else {\n      return value;\n    }\n  };\n  return Stringifier;\n}();\nexports.default = Stringifier;\nmodule.exports = exports['default'];","map":{"version":3,"names":["defaultRaw","colon","indent","beforeDecl","beforeRule","beforeOpen","beforeClose","beforeComment","after","emptyBody","commentLeft","commentRight","capitalize","str","toUpperCase","slice","Stringifier","builder","_classCallCheck","stringify","node","semicolon","type","root","body","raws","comment","left","raw","right","text","decl","between","string","prop","rawValue","important","rule","block","ownSemicolon","atrule","name","params","afterName","nodes","end","last","length","i","child","before","start","own","detect","value","parent","first","rawCache","beforeAfter","method","walk","rawSemicolon","rawEmptyBody","rawIndent","p","parts","split","replace","rawBeforeComment","walkComments","indexOf","rawBeforeDecl","walkDecls","rawBeforeRule","rawBeforeClose","rawBeforeOpen","rawColon","buf","depth","step"],"sources":["C:\\Users\\Francisco\\Documents\\GitHub\\examenApi\\EXAMEN-API-NOTICIAS\\node_modules\\postcss-functions\\node_modules\\postcss\\lib\\stringifier.es6"],"sourcesContent":["const defaultRaw = {\n    colon:         ': ',\n    indent:        '    ',\n    beforeDecl:    '\\n',\n    beforeRule:    '\\n',\n    beforeOpen:    ' ',\n    beforeClose:   '\\n',\n    beforeComment: '\\n',\n    after:         '\\n',\n    emptyBody:     '',\n    commentLeft:   ' ',\n    commentRight:  ' '\n};\n\nfunction capitalize(str) {\n    return str[0].toUpperCase() + str.slice(1);\n}\n\nclass Stringifier {\n\n    constructor(builder) {\n        this.builder = builder;\n    }\n\n    stringify(node, semicolon) {\n        this[node.type](node, semicolon);\n    }\n\n    root(node) {\n        this.body(node);\n        if ( node.raws.after ) this.builder(node.raws.after);\n    }\n\n    comment(node) {\n        let left  = this.raw(node, 'left',  'commentLeft');\n        let right = this.raw(node, 'right', 'commentRight');\n        this.builder('/*' + left + node.text + right + '*/', node);\n    }\n\n    decl(node, semicolon) {\n        let between = this.raw(node, 'between', 'colon');\n        let string  = node.prop + between + this.rawValue(node, 'value');\n\n        if ( node.important ) {\n            string += node.raws.important || ' !important';\n        }\n\n        if ( semicolon ) string += ';';\n        this.builder(string, node);\n    }\n\n    rule(node) {\n        this.block(node, this.rawValue(node, 'selector'));\n        if ( node.raws.ownSemicolon ) {\n            this.builder(node.raws.ownSemicolon, node, 'end');\n        }\n    }\n\n    atrule(node, semicolon) {\n        let name   = '@' + node.name;\n        let params = node.params ? this.rawValue(node, 'params') : '';\n\n        if ( typeof node.raws.afterName !== 'undefined' ) {\n            name += node.raws.afterName;\n        } else if ( params ) {\n            name += ' ';\n        }\n\n        if ( node.nodes ) {\n            this.block(node, name + params);\n        } else {\n            let end = (node.raws.between || '') + (semicolon ? ';' : '');\n            this.builder(name + params + end, node);\n        }\n    }\n\n    body(node) {\n        let last = node.nodes.length - 1;\n        while ( last > 0 ) {\n            if ( node.nodes[last].type !== 'comment' ) break;\n            last -= 1;\n        }\n\n        let semicolon = this.raw(node, 'semicolon');\n        for ( let i = 0; i < node.nodes.length; i++ ) {\n            let child  = node.nodes[i];\n            let before = this.raw(child, 'before');\n            if ( before ) this.builder(before);\n            this.stringify(child, last !== i || semicolon);\n        }\n    }\n\n    block(node, start) {\n        let between = this.raw(node, 'between', 'beforeOpen');\n        this.builder(start + between + '{', node, 'start');\n\n        let after;\n        if ( node.nodes && node.nodes.length ) {\n            this.body(node);\n            after = this.raw(node, 'after');\n        } else {\n            after = this.raw(node, 'after', 'emptyBody');\n        }\n\n        if ( after ) this.builder(after);\n        this.builder('}', node, 'end');\n    }\n\n    raw(node, own, detect) {\n        let value;\n        if ( !detect ) detect = own;\n\n        // Already had\n        if ( own ) {\n            value = node.raws[own];\n            if ( typeof value !== 'undefined' ) return value;\n        }\n\n        let parent = node.parent;\n\n        // Hack for first rule in CSS\n        if ( detect === 'before' ) {\n            if ( !parent || parent.type === 'root' && parent.first === node ) {\n                return '';\n            }\n        }\n\n        // Floating child without parent\n        if ( !parent ) return defaultRaw[detect];\n\n        // Detect style by other nodes\n        let root = node.root();\n        if ( !root.rawCache ) root.rawCache = { };\n        if ( typeof root.rawCache[detect] !== 'undefined' ) {\n            return root.rawCache[detect];\n        }\n\n        if ( detect === 'before' || detect === 'after' ) {\n            return this.beforeAfter(node, detect);\n        } else {\n            let method = 'raw' + capitalize(detect);\n            if ( this[method] ) {\n                value = this[method](root, node);\n            } else {\n                root.walk( i => {\n                    value = i.raws[own];\n                    if ( typeof value !== 'undefined' ) return false;\n                });\n            }\n        }\n\n        if ( typeof value === 'undefined' ) value = defaultRaw[detect];\n\n        root.rawCache[detect] = value;\n        return value;\n    }\n\n    rawSemicolon(root) {\n        let value;\n        root.walk( i => {\n            if ( i.nodes && i.nodes.length && i.last.type === 'decl' ) {\n                value = i.raws.semicolon;\n                if ( typeof value !== 'undefined' ) return false;\n            }\n        });\n        return value;\n    }\n\n    rawEmptyBody(root) {\n        let value;\n        root.walk( i => {\n            if ( i.nodes && i.nodes.length === 0 ) {\n                value = i.raws.after;\n                if ( typeof value !== 'undefined' ) return false;\n            }\n        });\n        return value;\n    }\n\n    rawIndent(root) {\n        if ( root.raws.indent ) return root.raws.indent;\n        let value;\n        root.walk( i => {\n            let p = i.parent;\n            if ( p && p !== root && p.parent && p.parent === root ) {\n                if ( typeof i.raws.before !== 'undefined' ) {\n                    let parts = i.raws.before.split('\\n');\n                    value = parts[parts.length - 1];\n                    value = value.replace(/[^\\s]/g, '');\n                    return false;\n                }\n            }\n        });\n        return value;\n    }\n\n    rawBeforeComment(root, node) {\n        let value;\n        root.walkComments( i => {\n            if ( typeof i.raws.before !== 'undefined' ) {\n                value = i.raws.before;\n                if ( value.indexOf('\\n') !== -1 ) {\n                    value = value.replace(/[^\\n]+$/, '');\n                }\n                return false;\n            }\n        });\n        if ( typeof value === 'undefined' ) {\n            value = this.raw(node, null, 'beforeDecl');\n        } else if ( value ) {\n            value = value.replace(/[^\\s]/g, '');\n        }\n        return value;\n    }\n\n    rawBeforeDecl(root, node) {\n        let value;\n        root.walkDecls( i => {\n            if ( typeof i.raws.before !== 'undefined' ) {\n                value = i.raws.before;\n                if ( value.indexOf('\\n') !== -1 ) {\n                    value = value.replace(/[^\\n]+$/, '');\n                }\n                return false;\n            }\n        });\n        if ( typeof value === 'undefined' ) {\n            value = this.raw(node, null, 'beforeRule');\n        } else if ( value ) {\n            value = value.replace(/[^\\s]/g, '');\n        }\n        return value;\n    }\n\n    rawBeforeRule(root) {\n        let value;\n        root.walk( i => {\n            if ( i.nodes && (i.parent !== root || root.first !== i) ) {\n                if ( typeof i.raws.before !== 'undefined' ) {\n                    value = i.raws.before;\n                    if ( value.indexOf('\\n') !== -1 ) {\n                        value = value.replace(/[^\\n]+$/, '');\n                    }\n                    return false;\n                }\n            }\n        });\n        if ( value ) value = value.replace(/[^\\s]/g, '');\n        return value;\n    }\n\n    rawBeforeClose(root) {\n        let value;\n        root.walk( i => {\n            if ( i.nodes && i.nodes.length > 0 ) {\n                if ( typeof i.raws.after !== 'undefined' ) {\n                    value = i.raws.after;\n                    if ( value.indexOf('\\n') !== -1 ) {\n                        value = value.replace(/[^\\n]+$/, '');\n                    }\n                    return false;\n                }\n            }\n        });\n        if ( value ) value = value.replace(/[^\\s]/g, '');\n        return value;\n    }\n\n    rawBeforeOpen(root) {\n        let value;\n        root.walk( i => {\n            if ( i.type !== 'decl' ) {\n                value = i.raws.between;\n                if ( typeof value !== 'undefined' ) return false;\n            }\n        });\n        return value;\n    }\n\n    rawColon(root) {\n        let value;\n        root.walkDecls( i => {\n            if ( typeof i.raws.between !== 'undefined' ) {\n                value = i.raws.between.replace(/[^\\s:]/g, '');\n                return false;\n            }\n        });\n        return value;\n    }\n\n    beforeAfter(node, detect) {\n        let value;\n        if ( node.type === 'decl' ) {\n            value = this.raw(node, null, 'beforeDecl');\n        } else if ( node.type === 'comment' ) {\n            value = this.raw(node, null, 'beforeComment');\n        } else if ( detect === 'before' ) {\n            value = this.raw(node, null, 'beforeRule');\n        } else {\n            value = this.raw(node, null, 'beforeClose');\n        }\n\n        let buf   = node.parent;\n        let depth = 0;\n        while ( buf && buf.type !== 'root' ) {\n            depth += 1;\n            buf = buf.parent;\n        }\n\n        if ( value.indexOf('\\n') !== -1 ) {\n            let indent = this.raw(node, null, 'indent');\n            if ( indent.length ) {\n                for ( let step = 0; step < depth; step++ ) value += indent;\n            }\n        }\n\n        return value;\n    }\n\n    rawValue(node, prop) {\n        let value = node[prop];\n        let raw   = node.raws[prop];\n        if ( raw && raw.value === value ) {\n            return raw.raw;\n        } else {\n            return value;\n        }\n    }\n\n}\n\nexport default Stringifier;\n"],"mappings":";;;;;;;;AAAA,IAAMA,UAAA,GAAa;EACfC,KAAA,EAAe,IADA;EAEfC,MAAA,EAAe,MAFA;EAGfC,UAAA,EAAe,IAHA;EAIfC,UAAA,EAAe,IAJA;EAKfC,UAAA,EAAe,GALA;EAMfC,WAAA,EAAe,IANA;EAOfC,aAAA,EAAe,IAPA;EAQfC,KAAA,EAAe,IARA;EASfC,SAAA,EAAe,EATA;EAUfC,WAAA,EAAe,GAVA;EAWfC,YAAA,EAAe;AAXA,CAAnB;AAcA,SAASC,UAATA,CAAoBC,GAApB,EAAyB;EACrB,OAAOA,GAAA,CAAI,CAAJ,EAAOC,WAAP,KAAuBD,GAAA,CAAIE,KAAJ,CAAU,CAAV,CAA9B;AACH;IAEKC,W;EAEF,SAAAA,YAAYC,OAAZ,EAAqB;IAAAC,eAAA,OAAAF,WAAA;IACjB,KAAKC,OAAL,GAAeA,OAAf;EACH;wBAEDE,S,sBAAUC,I,EAAMC,S,EAAW;IACvB,KAAKD,IAAA,CAAKE,IAAV,EAAgBF,IAAhB,EAAsBC,SAAtB;EACH,C;wBAEDE,I,iBAAKH,I,EAAM;IACP,KAAKI,IAAL,CAAUJ,IAAV;IACA,IAAKA,IAAA,CAAKK,IAAL,CAAUjB,KAAf,EAAuB,KAAKS,OAAL,CAAaG,IAAA,CAAKK,IAAL,CAAUjB,KAAvB;EAC1B,C;wBAEDkB,O,oBAAQN,I,EAAM;IACV,IAAIO,IAAA,GAAQ,KAAKC,GAAL,CAASR,IAAT,EAAe,MAAf,EAAwB,aAAxB,CAAZ;IACA,IAAIS,KAAA,GAAQ,KAAKD,GAAL,CAASR,IAAT,EAAe,OAAf,EAAwB,cAAxB,CAAZ;IACA,KAAKH,OAAL,CAAa,OAAOU,IAAP,GAAcP,IAAA,CAAKU,IAAnB,GAA0BD,KAA1B,GAAkC,IAA/C,EAAqDT,IAArD;EACH,C;wBAEDW,I,iBAAKX,I,EAAMC,S,EAAW;IAClB,IAAIW,OAAA,GAAU,KAAKJ,GAAL,CAASR,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAAd;IACA,IAAIa,MAAA,GAAUb,IAAA,CAAKc,IAAL,GAAYF,OAAZ,GAAsB,KAAKG,QAAL,CAAcf,IAAd,EAAoB,OAApB,CAApC;IAEA,IAAKA,IAAA,CAAKgB,SAAV,EAAsB;MAClBH,MAAA,IAAUb,IAAA,CAAKK,IAAL,CAAUW,SAAV,IAAuB,aAAjC;IACH;IAED,IAAKf,SAAL,EAAiBY,MAAA,IAAU,GAAV;IACjB,KAAKhB,OAAL,CAAagB,MAAb,EAAqBb,IAArB;EACH,C;wBAEDiB,I,iBAAKjB,I,EAAM;IACP,KAAKkB,KAAL,CAAWlB,IAAX,EAAiB,KAAKe,QAAL,CAAcf,IAAd,EAAoB,UAApB,CAAjB;IACA,IAAKA,IAAA,CAAKK,IAAL,CAAUc,YAAf,EAA8B;MAC1B,KAAKtB,OAAL,CAAaG,IAAA,CAAKK,IAAL,CAAUc,YAAvB,EAAqCnB,IAArC,EAA2C,KAA3C;IACH;EACJ,C;wBAEDoB,M,mBAAOpB,I,EAAMC,S,EAAW;IACpB,IAAIoB,IAAA,GAAS,MAAMrB,IAAA,CAAKqB,IAAxB;IACA,IAAIC,MAAA,GAAStB,IAAA,CAAKsB,MAAL,GAAc,KAAKP,QAAL,CAAcf,IAAd,EAAoB,QAApB,CAAd,GAA8C,EAA3D;IAEA,IAAK,OAAOA,IAAA,CAAKK,IAAL,CAAUkB,SAAjB,KAA+B,WAApC,EAAkD;MAC9CF,IAAA,IAAQrB,IAAA,CAAKK,IAAL,CAAUkB,SAAlB;IACH,CAFD,MAEO,IAAKD,MAAL,EAAc;MACjBD,IAAA,IAAQ,GAAR;IACH;IAED,IAAKrB,IAAA,CAAKwB,KAAV,EAAkB;MACd,KAAKN,KAAL,CAAWlB,IAAX,EAAiBqB,IAAA,GAAOC,MAAxB;IACH,CAFD,MAEO;MACH,IAAIG,GAAA,GAAM,CAACzB,IAAA,CAAKK,IAAL,CAAUO,OAAV,IAAqB,EAAtB,KAA6BX,SAAA,GAAY,GAAZ,GAAkB,EAA/C,CAAV;MACA,KAAKJ,OAAL,CAAawB,IAAA,GAAOC,MAAP,GAAgBG,GAA7B,EAAkCzB,IAAlC;IACH;EACJ,C;wBAEDI,I,iBAAKJ,I,EAAM;IACP,IAAI0B,IAAA,GAAO1B,IAAA,CAAKwB,KAAL,CAAWG,MAAX,GAAoB,CAA/B;IACA,OAAQD,IAAA,GAAO,CAAf,EAAmB;MACf,IAAK1B,IAAA,CAAKwB,KAAL,CAAWE,IAAX,EAAiBxB,IAAjB,KAA0B,SAA/B,EAA2C;MAC3CwB,IAAA,IAAQ,CAAR;IACH;IAED,IAAIzB,SAAA,GAAY,KAAKO,GAAL,CAASR,IAAT,EAAe,WAAf,CAAhB;IACA,KAAM,IAAI4B,CAAA,GAAI,CAAd,EAAiBA,CAAA,GAAI5B,IAAA,CAAKwB,KAAL,CAAWG,MAAhC,EAAwCC,CAAA,EAAxC,EAA8C;MAC1C,IAAIC,KAAA,GAAS7B,IAAA,CAAKwB,KAAL,CAAWI,CAAX,CAAb;MACA,IAAIE,MAAA,GAAS,KAAKtB,GAAL,CAASqB,KAAT,EAAgB,QAAhB,CAAb;MACA,IAAKC,MAAL,EAAc,KAAKjC,OAAL,CAAaiC,MAAb;MACd,KAAK/B,SAAL,CAAe8B,KAAf,EAAsBH,IAAA,KAASE,CAAT,IAAc3B,SAApC;IACH;EACJ,C;wBAEDiB,K,kBAAMlB,I,EAAM+B,K,EAAO;IACf,IAAInB,OAAA,GAAU,KAAKJ,GAAL,CAASR,IAAT,EAAe,SAAf,EAA0B,YAA1B,CAAd;IACA,KAAKH,OAAL,CAAakC,KAAA,GAAQnB,OAAR,GAAkB,GAA/B,EAAoCZ,IAApC,EAA0C,OAA1C;IAEA,IAAIZ,KAAA,SAAJ;IACA,IAAKY,IAAA,CAAKwB,KAAL,IAAcxB,IAAA,CAAKwB,KAAL,CAAWG,MAA9B,EAAuC;MACnC,KAAKvB,IAAL,CAAUJ,IAAV;MACAZ,KAAA,GAAQ,KAAKoB,GAAL,CAASR,IAAT,EAAe,OAAf,CAAR;IACH,CAHD,MAGO;MACHZ,KAAA,GAAQ,KAAKoB,GAAL,CAASR,IAAT,EAAe,OAAf,EAAwB,WAAxB,CAAR;IACH;IAED,IAAKZ,KAAL,EAAa,KAAKS,OAAL,CAAaT,KAAb;IACb,KAAKS,OAAL,CAAa,GAAb,EAAkBG,IAAlB,EAAwB,KAAxB;EACH,C;wBAEDQ,G,gBAAIR,I,EAAMgC,G,EAAKC,M,EAAQ;IACnB,IAAIC,KAAA,SAAJ;IACA,IAAK,CAACD,MAAN,EAAeA,MAAA,GAASD,GAAT;;IAEf;IACA,IAAKA,GAAL,EAAW;MACPE,KAAA,GAAQlC,IAAA,CAAKK,IAAL,CAAU2B,GAAV,CAAR;MACA,IAAK,OAAOE,KAAP,KAAiB,WAAtB,EAAoC,OAAOA,KAAP;IACvC;IAED,IAAIC,MAAA,GAASnC,IAAA,CAAKmC,MAAlB;;IAEA;IACA,IAAKF,MAAA,KAAW,QAAhB,EAA2B;MACvB,IAAK,CAACE,MAAD,IAAWA,MAAA,CAAOjC,IAAP,KAAgB,MAAhB,IAA0BiC,MAAA,CAAOC,KAAP,KAAiBpC,IAA3D,EAAkE;QAC9D,OAAO,EAAP;MACH;IACJ;;IAED;IACA,IAAK,CAACmC,MAAN,EAAe,OAAOvD,UAAA,CAAWqD,MAAX,CAAP;;IAEf;IACA,IAAI9B,IAAA,GAAOH,IAAA,CAAKG,IAAL,EAAX;IACA,IAAK,CAACA,IAAA,CAAKkC,QAAX,EAAsBlC,IAAA,CAAKkC,QAAL,GAAgB,EAAhB;IACtB,IAAK,OAAOlC,IAAA,CAAKkC,QAAL,CAAcJ,MAAd,CAAP,KAAiC,WAAtC,EAAoD;MAChD,OAAO9B,IAAA,CAAKkC,QAAL,CAAcJ,MAAd,CAAP;IACH;IAED,IAAKA,MAAA,KAAW,QAAX,IAAuBA,MAAA,KAAW,OAAvC,EAAiD;MAC7C,OAAO,KAAKK,WAAL,CAAiBtC,IAAjB,EAAuBiC,MAAvB,CAAP;IACH,CAFD,MAEO;MACH,IAAIM,MAAA,GAAS,QAAQ/C,UAAA,CAAWyC,MAAX,CAArB;MACA,IAAK,KAAKM,MAAL,CAAL,EAAoB;QAChBL,KAAA,GAAQ,KAAKK,MAAL,EAAapC,IAAb,EAAmBH,IAAnB,CAAR;MACH,CAFD,MAEO;QACHG,IAAA,CAAKqC,IAAL,CAAW,UAAAZ,CAAA,EAAK;UACZM,KAAA,GAAQN,CAAA,CAAEvB,IAAF,CAAO2B,GAAP,CAAR;UACA,IAAK,OAAOE,KAAP,KAAiB,WAAtB,EAAoC,OAAO,KAAP;QACvC,CAHD;MAIH;IACJ;IAED,IAAK,OAAOA,KAAP,KAAiB,WAAtB,EAAoCA,KAAA,GAAQtD,UAAA,CAAWqD,MAAX,CAAR;IAEpC9B,IAAA,CAAKkC,QAAL,CAAcJ,MAAd,IAAwBC,KAAxB;IACA,OAAOA,KAAP;EACH,C;wBAEDO,Y,yBAAatC,I,EAAM;IACf,IAAI+B,KAAA,SAAJ;IACA/B,IAAA,CAAKqC,IAAL,CAAW,UAAAZ,CAAA,EAAK;MACZ,IAAKA,CAAA,CAAEJ,KAAF,IAAWI,CAAA,CAAEJ,KAAF,CAAQG,MAAnB,IAA6BC,CAAA,CAAEF,IAAF,CAAOxB,IAAP,KAAgB,MAAlD,EAA2D;QACvDgC,KAAA,GAAQN,CAAA,CAAEvB,IAAF,CAAOJ,SAAf;QACA,IAAK,OAAOiC,KAAP,KAAiB,WAAtB,EAAoC,OAAO,KAAP;MACvC;IACJ,CALD;IAMA,OAAOA,KAAP;EACH,C;wBAEDQ,Y,yBAAavC,I,EAAM;IACf,IAAI+B,KAAA,SAAJ;IACA/B,IAAA,CAAKqC,IAAL,CAAW,UAAAZ,CAAA,EAAK;MACZ,IAAKA,CAAA,CAAEJ,KAAF,IAAWI,CAAA,CAAEJ,KAAF,CAAQG,MAAR,KAAmB,CAAnC,EAAuC;QACnCO,KAAA,GAAQN,CAAA,CAAEvB,IAAF,CAAOjB,KAAf;QACA,IAAK,OAAO8C,KAAP,KAAiB,WAAtB,EAAoC,OAAO,KAAP;MACvC;IACJ,CALD;IAMA,OAAOA,KAAP;EACH,C;wBAEDS,S,sBAAUxC,I,EAAM;IACZ,IAAKA,IAAA,CAAKE,IAAL,CAAUvB,MAAf,EAAwB,OAAOqB,IAAA,CAAKE,IAAL,CAAUvB,MAAjB;IACxB,IAAIoD,KAAA,SAAJ;IACA/B,IAAA,CAAKqC,IAAL,CAAW,UAAAZ,CAAA,EAAK;MACZ,IAAIgB,CAAA,GAAIhB,CAAA,CAAEO,MAAV;MACA,IAAKS,CAAA,IAAKA,CAAA,KAAMzC,IAAX,IAAmByC,CAAA,CAAET,MAArB,IAA+BS,CAAA,CAAET,MAAF,KAAahC,IAAjD,EAAwD;QACpD,IAAK,OAAOyB,CAAA,CAAEvB,IAAF,CAAOyB,MAAd,KAAyB,WAA9B,EAA4C;UACxC,IAAIe,KAAA,GAAQjB,CAAA,CAAEvB,IAAF,CAAOyB,MAAP,CAAcgB,KAAd,CAAoB,IAApB,CAAZ;UACAZ,KAAA,GAAQW,KAAA,CAAMA,KAAA,CAAMlB,MAAN,GAAe,CAArB,CAAR;UACAO,KAAA,GAAQA,KAAA,CAAMa,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAR;UACA,OAAO,KAAP;QACH;MACJ;IACJ,CAVD;IAWA,OAAOb,KAAP;EACH,C;wBAEDc,gB,6BAAiB7C,I,EAAMH,I,EAAM;IACzB,IAAIkC,KAAA,SAAJ;IACA/B,IAAA,CAAK8C,YAAL,CAAmB,UAAArB,CAAA,EAAK;MACpB,IAAK,OAAOA,CAAA,CAAEvB,IAAF,CAAOyB,MAAd,KAAyB,WAA9B,EAA4C;QACxCI,KAAA,GAAQN,CAAA,CAAEvB,IAAF,CAAOyB,MAAf;QACA,IAAKI,KAAA,CAAMgB,OAAN,CAAc,IAAd,MAAwB,CAAC,CAA9B,EAAkC;UAC9BhB,KAAA,GAAQA,KAAA,CAAMa,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAAR;QACH;QACD,OAAO,KAAP;MACH;IACJ,CARD;IASA,IAAK,OAAOb,KAAP,KAAiB,WAAtB,EAAoC;MAChCA,KAAA,GAAQ,KAAK1B,GAAL,CAASR,IAAT,EAAe,IAAf,EAAqB,YAArB,CAAR;IACH,CAFD,MAEO,IAAKkC,KAAL,EAAa;MAChBA,KAAA,GAAQA,KAAA,CAAMa,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAR;IACH;IACD,OAAOb,KAAP;EACH,C;wBAEDiB,a,0BAAchD,I,EAAMH,I,EAAM;IACtB,IAAIkC,KAAA,SAAJ;IACA/B,IAAA,CAAKiD,SAAL,CAAgB,UAAAxB,CAAA,EAAK;MACjB,IAAK,OAAOA,CAAA,CAAEvB,IAAF,CAAOyB,MAAd,KAAyB,WAA9B,EAA4C;QACxCI,KAAA,GAAQN,CAAA,CAAEvB,IAAF,CAAOyB,MAAf;QACA,IAAKI,KAAA,CAAMgB,OAAN,CAAc,IAAd,MAAwB,CAAC,CAA9B,EAAkC;UAC9BhB,KAAA,GAAQA,KAAA,CAAMa,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAAR;QACH;QACD,OAAO,KAAP;MACH;IACJ,CARD;IASA,IAAK,OAAOb,KAAP,KAAiB,WAAtB,EAAoC;MAChCA,KAAA,GAAQ,KAAK1B,GAAL,CAASR,IAAT,EAAe,IAAf,EAAqB,YAArB,CAAR;IACH,CAFD,MAEO,IAAKkC,KAAL,EAAa;MAChBA,KAAA,GAAQA,KAAA,CAAMa,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAR;IACH;IACD,OAAOb,KAAP;EACH,C;wBAEDmB,a,0BAAclD,I,EAAM;IAChB,IAAI+B,KAAA,SAAJ;IACA/B,IAAA,CAAKqC,IAAL,CAAW,UAAAZ,CAAA,EAAK;MACZ,IAAKA,CAAA,CAAEJ,KAAF,KAAYI,CAAA,CAAEO,MAAF,KAAahC,IAAb,IAAqBA,IAAA,CAAKiC,KAAL,KAAeR,CAAhD,CAAL,EAA0D;QACtD,IAAK,OAAOA,CAAA,CAAEvB,IAAF,CAAOyB,MAAd,KAAyB,WAA9B,EAA4C;UACxCI,KAAA,GAAQN,CAAA,CAAEvB,IAAF,CAAOyB,MAAf;UACA,IAAKI,KAAA,CAAMgB,OAAN,CAAc,IAAd,MAAwB,CAAC,CAA9B,EAAkC;YAC9BhB,KAAA,GAAQA,KAAA,CAAMa,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAAR;UACH;UACD,OAAO,KAAP;QACH;MACJ;IACJ,CAVD;IAWA,IAAKb,KAAL,EAAaA,KAAA,GAAQA,KAAA,CAAMa,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAR;IACb,OAAOb,KAAP;EACH,C;wBAEDoB,c,2BAAenD,I,EAAM;IACjB,IAAI+B,KAAA,SAAJ;IACA/B,IAAA,CAAKqC,IAAL,CAAW,UAAAZ,CAAA,EAAK;MACZ,IAAKA,CAAA,CAAEJ,KAAF,IAAWI,CAAA,CAAEJ,KAAF,CAAQG,MAAR,GAAiB,CAAjC,EAAqC;QACjC,IAAK,OAAOC,CAAA,CAAEvB,IAAF,CAAOjB,KAAd,KAAwB,WAA7B,EAA2C;UACvC8C,KAAA,GAAQN,CAAA,CAAEvB,IAAF,CAAOjB,KAAf;UACA,IAAK8C,KAAA,CAAMgB,OAAN,CAAc,IAAd,MAAwB,CAAC,CAA9B,EAAkC;YAC9BhB,KAAA,GAAQA,KAAA,CAAMa,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAAR;UACH;UACD,OAAO,KAAP;QACH;MACJ;IACJ,CAVD;IAWA,IAAKb,KAAL,EAAaA,KAAA,GAAQA,KAAA,CAAMa,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAR;IACb,OAAOb,KAAP;EACH,C;wBAEDqB,a,0BAAcpD,I,EAAM;IAChB,IAAI+B,KAAA,SAAJ;IACA/B,IAAA,CAAKqC,IAAL,CAAW,UAAAZ,CAAA,EAAK;MACZ,IAAKA,CAAA,CAAE1B,IAAF,KAAW,MAAhB,EAAyB;QACrBgC,KAAA,GAAQN,CAAA,CAAEvB,IAAF,CAAOO,OAAf;QACA,IAAK,OAAOsB,KAAP,KAAiB,WAAtB,EAAoC,OAAO,KAAP;MACvC;IACJ,CALD;IAMA,OAAOA,KAAP;EACH,C;wBAEDsB,Q,qBAASrD,I,EAAM;IACX,IAAI+B,KAAA,SAAJ;IACA/B,IAAA,CAAKiD,SAAL,CAAgB,UAAAxB,CAAA,EAAK;MACjB,IAAK,OAAOA,CAAA,CAAEvB,IAAF,CAAOO,OAAd,KAA0B,WAA/B,EAA6C;QACzCsB,KAAA,GAAQN,CAAA,CAAEvB,IAAF,CAAOO,OAAP,CAAemC,OAAf,CAAuB,SAAvB,EAAkC,EAAlC,CAAR;QACA,OAAO,KAAP;MACH;IACJ,CALD;IAMA,OAAOb,KAAP;EACH,C;wBAEDI,W,wBAAYtC,I,EAAMiC,M,EAAQ;IACtB,IAAIC,KAAA,SAAJ;IACA,IAAKlC,IAAA,CAAKE,IAAL,KAAc,MAAnB,EAA4B;MACxBgC,KAAA,GAAQ,KAAK1B,GAAL,CAASR,IAAT,EAAe,IAAf,EAAqB,YAArB,CAAR;IACH,CAFD,MAEO,IAAKA,IAAA,CAAKE,IAAL,KAAc,SAAnB,EAA+B;MAClCgC,KAAA,GAAQ,KAAK1B,GAAL,CAASR,IAAT,EAAe,IAAf,EAAqB,eAArB,CAAR;IACH,CAFM,MAEA,IAAKiC,MAAA,KAAW,QAAhB,EAA2B;MAC9BC,KAAA,GAAQ,KAAK1B,GAAL,CAASR,IAAT,EAAe,IAAf,EAAqB,YAArB,CAAR;IACH,CAFM,MAEA;MACHkC,KAAA,GAAQ,KAAK1B,GAAL,CAASR,IAAT,EAAe,IAAf,EAAqB,aAArB,CAAR;IACH;IAED,IAAIyD,GAAA,GAAQzD,IAAA,CAAKmC,MAAjB;IACA,IAAIuB,KAAA,GAAQ,CAAZ;IACA,OAAQD,GAAA,IAAOA,GAAA,CAAIvD,IAAJ,KAAa,MAA5B,EAAqC;MACjCwD,KAAA,IAAS,CAAT;MACAD,GAAA,GAAMA,GAAA,CAAItB,MAAV;IACH;IAED,IAAKD,KAAA,CAAMgB,OAAN,CAAc,IAAd,MAAwB,CAAC,CAA9B,EAAkC;MAC9B,IAAIpE,MAAA,GAAS,KAAK0B,GAAL,CAASR,IAAT,EAAe,IAAf,EAAqB,QAArB,CAAb;MACA,IAAKlB,MAAA,CAAO6C,MAAZ,EAAqB;QACjB,KAAM,IAAIgC,IAAA,GAAO,CAAjB,EAAoBA,IAAA,GAAOD,KAA3B,EAAkCC,IAAA,EAAlC;UAA2CzB,KAAA,IAASpD,MAAT;QAA3C;MACH;IACJ;IAED,OAAOoD,KAAP;EACH,C;wBAEDnB,Q,qBAASf,I,EAAMc,I,EAAM;IACjB,IAAIoB,KAAA,GAAQlC,IAAA,CAAKc,IAAL,CAAZ;IACA,IAAIN,GAAA,GAAQR,IAAA,CAAKK,IAAL,CAAUS,IAAV,CAAZ;IACA,IAAKN,GAAA,IAAOA,GAAA,CAAI0B,KAAJ,KAAcA,KAA1B,EAAkC;MAC9B,OAAO1B,GAAA,CAAIA,GAAX;IACH,CAFD,MAEO;MACH,OAAO0B,KAAP;IACH;EACJ,C;;;kBAIUtC,W"},"metadata":{},"sourceType":"script","externalDependencies":[]}