{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _warnOnce = require('./warn-once');\nvar _warnOnce2 = _interopRequireDefault(_warnOnce);\nvar _node = require('./node');\nvar _node2 = _interopRequireDefault(_node);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * Represents a CSS declaration.\n *\n * @extends Node\n *\n * @example\n * const root = postcss.parse('a { color: black }');\n * const decl = root.first.first;\n * decl.type       //=> 'decl'\n * decl.toString() //=> ' color: black'\n */\nvar Declaration = function (_Node) {\n  _inherits(Declaration, _Node);\n  function Declaration(defaults) {\n    _classCallCheck(this, Declaration);\n    var _this = _possibleConstructorReturn(this, _Node.call(this, defaults));\n    _this.type = 'decl';\n    return _this;\n  }\n  _createClass(Declaration, [{\n    key: '_value',\n    get: function get() {\n      (0, _warnOnce2.default)('Node#_value was deprecated. Use Node#raws.value');\n      return this.raws.value;\n    },\n    set: function set(val) {\n      (0, _warnOnce2.default)('Node#_value was deprecated. Use Node#raws.value');\n      this.raws.value = val;\n    }\n  }, {\n    key: '_important',\n    get: function get() {\n      (0, _warnOnce2.default)('Node#_important was deprecated. Use Node#raws.important');\n      return this.raws.important;\n    },\n    set: function set(val) {\n      (0, _warnOnce2.default)('Node#_important was deprecated. Use Node#raws.important');\n      this.raws.important = val;\n    }\n\n    /**\n     * @memberof Declaration#\n     * @member {string} prop - the declaration’s property name\n     *\n     * @example\n     * const root = postcss.parse('a { color: black }');\n     * const decl = root.first.first;\n     * decl.prop //=> 'color'\n     */\n\n    /**\n     * @memberof Declaration#\n     * @member {string} value - the declaration’s value\n     *\n     * @example\n     * const root = postcss.parse('a { color: black }');\n     * const decl = root.first.first;\n     * decl.value //=> 'black'\n     */\n\n    /**\n     * @memberof Declaration#\n     * @member {boolean} important - `true` if the declaration\n     *                               has an !important annotation.\n     *\n     * @example\n     * const root = postcss.parse('a { color: black !important; color: red }');\n     * root.first.first.important //=> true\n     * root.first.last.important  //=> undefined\n     */\n\n    /**\n     * @memberof Declaration#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `before`: the space symbols before the node. It also stores `*`\n     *   and `_` symbols before the declaration (IE hack).\n     * * `between`: the symbols between the property and value\n     *   for declarations.\n     * * `important`: the content of the important statement,\n     *   if it is not just `!important`.\n     *\n     * PostCSS cleans declaration from comments and extra spaces,\n     * but it stores origin content in raws properties.\n     * As such, if you don’t change a declaration’s value,\n     * PostCSS will use the raw value with comments.\n     *\n     * @example\n     * const root = postcss.parse('a {\\n  color:black\\n}')\n     * root.first.first.raws //=> { before: '\\n  ', between: ':' }\n     */\n  }]);\n\n  return Declaration;\n}(_node2.default);\nexports.default = Declaration;\nmodule.exports = exports['default'];","map":{"version":3,"names":["_warnOnce","require","_node","Declaration","defaults","_classCallCheck","_this","_possibleConstructorReturn","_Node","call","type","_warnOnce2","default","raws","value","val","important"],"sources":["C:\\Users\\Francisco\\Documents\\GitHub\\examenApi\\EXAMEN-API-NOTICIAS\\node_modules\\perfectionist\\node_modules\\postcss\\lib\\declaration.es6"],"sourcesContent":["import warnOnce from './warn-once';\nimport Node     from './node';\n\n/**\n * Represents a CSS declaration.\n *\n * @extends Node\n *\n * @example\n * const root = postcss.parse('a { color: black }');\n * const decl = root.first.first;\n * decl.type       //=> 'decl'\n * decl.toString() //=> ' color: black'\n */\nclass Declaration extends Node {\n\n    constructor(defaults) {\n        super(defaults);\n        this.type = 'decl';\n    }\n\n    get _value() {\n        warnOnce('Node#_value was deprecated. Use Node#raws.value');\n        return this.raws.value;\n    }\n\n    set _value(val) {\n        warnOnce('Node#_value was deprecated. Use Node#raws.value');\n        this.raws.value = val;\n    }\n\n    get _important() {\n        warnOnce('Node#_important was deprecated. Use Node#raws.important');\n        return this.raws.important;\n    }\n\n    set _important(val) {\n        warnOnce('Node#_important was deprecated. Use Node#raws.important');\n        this.raws.important = val;\n    }\n\n    /**\n     * @memberof Declaration#\n     * @member {string} prop - the declaration’s property name\n     *\n     * @example\n     * const root = postcss.parse('a { color: black }');\n     * const decl = root.first.first;\n     * decl.prop //=> 'color'\n     */\n\n    /**\n     * @memberof Declaration#\n     * @member {string} value - the declaration’s value\n     *\n     * @example\n     * const root = postcss.parse('a { color: black }');\n     * const decl = root.first.first;\n     * decl.value //=> 'black'\n     */\n\n    /**\n     * @memberof Declaration#\n     * @member {boolean} important - `true` if the declaration\n     *                               has an !important annotation.\n     *\n     * @example\n     * const root = postcss.parse('a { color: black !important; color: red }');\n     * root.first.first.important //=> true\n     * root.first.last.important  //=> undefined\n     */\n\n    /**\n     * @memberof Declaration#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `before`: the space symbols before the node. It also stores `*`\n     *   and `_` symbols before the declaration (IE hack).\n     * * `between`: the symbols between the property and value\n     *   for declarations.\n     * * `important`: the content of the important statement,\n     *   if it is not just `!important`.\n     *\n     * PostCSS cleans declaration from comments and extra spaces,\n     * but it stores origin content in raws properties.\n     * As such, if you don’t change a declaration’s value,\n     * PostCSS will use the raw value with comments.\n     *\n     * @example\n     * const root = postcss.parse('a {\\n  color:black\\n}')\n     * root.first.first.raws //=> { before: '\\n  ', between: ':' }\n     */\n\n}\n\nexport default Declaration;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;;AACA,IAAAC,KAAA,GAAAD,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;IAWME,W;;EAEF,SAAAA,YAAYC,QAAZ,EAAsB;IAAAC,eAAA,OAAAF,WAAA;IAAA,IAAAG,KAAA,GAAAC,0BAAA,OAClBC,KAAA,CAAAC,IAAA,OAAML,QAAN,CADkB;IAElBE,KAAA,CAAKI,IAAL,GAAY,MAAZ;IAFkB,OAAAJ,KAAA;EAGrB;;;wBAEY;MACT,IAAAK,UAAA,CAAAC,OAAA,EAAS,iDAAT;MACA,OAAO,KAAKC,IAAL,CAAUC,KAAjB;IACH,C;sBAEUC,G,EAAK;MACZ,IAAAJ,UAAA,CAAAC,OAAA,EAAS,iDAAT;MACA,KAAKC,IAAL,CAAUC,KAAV,GAAkBC,GAAlB;IACH;;;wBAEgB;MACb,IAAAJ,UAAA,CAAAC,OAAA,EAAS,yDAAT;MACA,OAAO,KAAKC,IAAL,CAAUG,SAAjB;IACH,C;sBAEcD,G,EAAK;MAChB,IAAAJ,UAAA,CAAAC,OAAA,EAAS,yDAAT;MACA,KAAKC,IAAL,CAAUG,SAAV,GAAsBD,GAAtB;IACH;;IAED;;;;;;;;;;IAUA;;;;;;;;;;IAUA;;;;;;;;;;;IAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBA2BWZ,W"},"metadata":{},"sourceType":"script","externalDependencies":[]}