{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _jsBase = require('js-base64');\nvar _sourceMap = require('source-map');\nvar _sourceMap2 = _interopRequireDefault(_sourceMap);\nvar _path = require('path');\nvar _path2 = _interopRequireDefault(_path);\nvar _fs = require('fs');\nvar _fs2 = _interopRequireDefault(_fs);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' });\n * root.input.map //=> PreviousMap\n */\nvar PreviousMap = function () {\n  /**\n   * @param {string}         css    - input CSS source\n   * @param {processOptions} [opts] - {@link Processor#process} options\n   */\n  function PreviousMap(css, opts) {\n    _classCallCheck(this, PreviousMap);\n    this.loadAnnotation(css);\n    /**\n     * @member {boolean} - Was source map inlined by data-uri to input CSS.\n     */\n    this.inline = this.startWith(this.annotation, 'data:');\n    var prev = opts.map ? opts.map.prev : undefined;\n    var text = this.loadMap(opts.from, prev);\n    if (text) this.text = text;\n  }\n\n  /**\n   * Create a instance of `SourceMapGenerator` class\n   * from the `source-map` library to work with source map information.\n   *\n   * It is lazy method, so it will create object only on first call\n   * and then it will use cache.\n   *\n   * @return {SourceMapGenerator} object with source map information\n   */\n\n  PreviousMap.prototype.consumer = function consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new _sourceMap2.default.SourceMapConsumer(this.text);\n    }\n    return this.consumerCache;\n  };\n\n  /**\n   * Does source map contains `sourcesContent` with input source text.\n   *\n   * @return {boolean} Is `sourcesContent` present\n   */\n\n  PreviousMap.prototype.withContent = function withContent() {\n    return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n  };\n  PreviousMap.prototype.startWith = function startWith(string, start) {\n    if (!string) return false;\n    return string.substr(0, start.length) === start;\n  };\n  PreviousMap.prototype.loadAnnotation = function loadAnnotation(css) {\n    var match = css.match(/\\/\\*\\s*# sourceMappingURL=(.*)\\s*\\*\\//);\n    if (match) this.annotation = match[1].trim();\n  };\n  PreviousMap.prototype.decodeInline = function decodeInline(text) {\n    var utfd64 = 'data:application/json;charset=utf-8;base64,';\n    var utf64 = 'data:application/json;charset=utf8;base64,';\n    var b64 = 'data:application/json;base64,';\n    var uri = 'data:application/json,';\n    if (this.startWith(text, uri)) {\n      return decodeURIComponent(text.substr(uri.length));\n    } else if (this.startWith(text, b64)) {\n      return _jsBase.Base64.decode(text.substr(b64.length));\n    } else if (this.startWith(text, utf64)) {\n      return _jsBase.Base64.decode(text.substr(utf64.length));\n    } else if (this.startWith(text, utfd64)) {\n      return _jsBase.Base64.decode(text.substr(utfd64.length));\n    } else {\n      var encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n      throw new Error('Unsupported source map encoding ' + encoding);\n    }\n  };\n  PreviousMap.prototype.loadMap = function loadMap(file, prev) {\n    if (prev === false) return false;\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev;\n      } else if (typeof prev === 'function') {\n        var prevPath = prev(file);\n        if (prevPath && _fs2.default.existsSync && _fs2.default.existsSync(prevPath)) {\n          return _fs2.default.readFileSync(prevPath, 'utf-8').toString().trim();\n        } else {\n          throw new Error('Unable to load previous source map: ' + prevPath.toString());\n        }\n      } else if (prev instanceof _sourceMap2.default.SourceMapConsumer) {\n        return _sourceMap2.default.SourceMapGenerator.fromSourceMap(prev).toString();\n      } else if (prev instanceof _sourceMap2.default.SourceMapGenerator) {\n        return prev.toString();\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev);\n      } else {\n        throw new Error('Unsupported previous source map format: ' + prev.toString());\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation);\n    } else if (this.annotation) {\n      var map = this.annotation;\n      if (file) map = _path2.default.join(_path2.default.dirname(file), map);\n      this.root = _path2.default.dirname(map);\n      if (_fs2.default.existsSync && _fs2.default.existsSync(map)) {\n        return _fs2.default.readFileSync(map, 'utf-8').toString().trim();\n      } else {\n        return false;\n      }\n    }\n  };\n  PreviousMap.prototype.isMap = function isMap(map) {\n    if ((typeof map === 'undefined' ? 'undefined' : _typeof(map)) !== 'object') return false;\n    return typeof map.mappings === 'string' || typeof map._mappings === 'string';\n  };\n  return PreviousMap;\n}();\nexports.default = PreviousMap;\nmodule.exports = exports['default'];","map":{"version":3,"names":["_jsBase","require","_sourceMap","_path","_fs","PreviousMap","css","opts","_classCallCheck","loadAnnotation","inline","startWith","annotation","prev","map","undefined","text","loadMap","from","consumer","consumerCache","_sourceMap2","default","SourceMapConsumer","withContent","sourcesContent","length","string","start","substr","match","trim","decodeInline","utfd64","utf64","b64","uri","decodeURIComponent","Base64","decode","encoding","Error","file","prevPath","_fs2","existsSync","readFileSync","toString","SourceMapGenerator","fromSourceMap","isMap","JSON","stringify","_path2","join","dirname","root","_typeof","mappings","_mappings"],"sources":["C:\\Users\\Francisco\\Documents\\GitHub\\examenApi\\EXAMEN-API-NOTICIAS\\node_modules\\perfectionist\\node_modules\\postcss\\lib\\previous-map.es6"],"sourcesContent":["import { Base64 } from 'js-base64';\nimport   mozilla  from 'source-map';\nimport   path     from 'path';\nimport   fs       from 'fs';\n\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * @example\n * const root = postcss.parse(css, { from: 'a.sass.css' });\n * root.input.map //=> PreviousMap\n */\nclass PreviousMap {\n\n    /**\n     * @param {string}         css    - input CSS source\n     * @param {processOptions} [opts] - {@link Processor#process} options\n     */\n    constructor(css, opts) {\n        this.loadAnnotation(css);\n        /**\n         * @member {boolean} - Was source map inlined by data-uri to input CSS.\n         */\n        this.inline = this.startWith(this.annotation, 'data:');\n\n        let prev = opts.map ? opts.map.prev : undefined;\n        let text = this.loadMap(opts.from, prev);\n        if ( text ) this.text = text;\n    }\n\n    /**\n     * Create a instance of `SourceMapGenerator` class\n     * from the `source-map` library to work with source map information.\n     *\n     * It is lazy method, so it will create object only on first call\n     * and then it will use cache.\n     *\n     * @return {SourceMapGenerator} object with source map information\n     */\n    consumer() {\n        if ( !this.consumerCache ) {\n            this.consumerCache = new mozilla.SourceMapConsumer(this.text);\n        }\n        return this.consumerCache;\n    }\n\n    /**\n     * Does source map contains `sourcesContent` with input source text.\n     *\n     * @return {boolean} Is `sourcesContent` present\n     */\n    withContent() {\n        return !!(this.consumer().sourcesContent &&\n                  this.consumer().sourcesContent.length > 0);\n    }\n\n    startWith(string, start) {\n        if ( !string ) return false;\n        return string.substr(0, start.length) === start;\n    }\n\n    loadAnnotation(css) {\n        let match = css.match(/\\/\\*\\s*# sourceMappingURL=(.*)\\s*\\*\\//);\n        if ( match ) this.annotation = match[1].trim();\n    }\n\n    decodeInline(text) {\n        let utfd64 = 'data:application/json;charset=utf-8;base64,';\n        let utf64  = 'data:application/json;charset=utf8;base64,';\n        let b64    = 'data:application/json;base64,';\n        let uri    = 'data:application/json,';\n\n        if ( this.startWith(text, uri) ) {\n            return decodeURIComponent( text.substr(uri.length) );\n\n        } else if ( this.startWith(text, b64) ) {\n            return Base64.decode( text.substr(b64.length) );\n\n        } else if ( this.startWith(text, utf64) ) {\n            return Base64.decode( text.substr(utf64.length) );\n\n        } else if ( this.startWith(text, utfd64) ) {\n            return Base64.decode( text.substr(utfd64.length) );\n\n        } else {\n            let encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n            throw new Error('Unsupported source map encoding ' + encoding);\n        }\n    }\n\n    loadMap(file, prev) {\n        if ( prev === false ) return false;\n\n        if ( prev ) {\n            if ( typeof prev === 'string' ) {\n                return prev;\n            } else if ( typeof prev === 'function' ) {\n                let prevPath = prev(file);\n                if ( prevPath && fs.existsSync && fs.existsSync(prevPath) ) {\n                    return fs.readFileSync(prevPath, 'utf-8').toString().trim();\n                } else {\n                    throw new Error('Unable to load previous source map: ' +\n                    prevPath.toString());\n                }\n            } else if ( prev instanceof mozilla.SourceMapConsumer ) {\n                return mozilla.SourceMapGenerator\n                    .fromSourceMap(prev).toString();\n            } else if ( prev instanceof mozilla.SourceMapGenerator ) {\n                return prev.toString();\n            } else if ( this.isMap(prev) ) {\n                return JSON.stringify(prev);\n            } else {\n                throw new Error('Unsupported previous source map format: ' +\n                    prev.toString());\n            }\n\n        } else if ( this.inline ) {\n            return this.decodeInline(this.annotation);\n\n        } else if ( this.annotation ) {\n            let map = this.annotation;\n            if ( file ) map = path.join(path.dirname(file), map);\n\n            this.root = path.dirname(map);\n            if ( fs.existsSync && fs.existsSync(map) ) {\n                return fs.readFileSync(map, 'utf-8').toString().trim();\n            } else {\n                return false;\n            }\n        }\n    }\n\n    isMap(map) {\n        if ( typeof map !== 'object' ) return false;\n        return typeof map.mappings === 'string' ||\n               typeof map._mappings === 'string';\n    }\n}\n\nexport default PreviousMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}