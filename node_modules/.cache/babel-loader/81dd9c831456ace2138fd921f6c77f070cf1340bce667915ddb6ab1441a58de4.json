{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _stringifier = require('postcss/lib/stringifier');\nvar _stringifier2 = _interopRequireDefault(_stringifier);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar ScssStringifier = function (_Stringifier) {\n  _inherits(ScssStringifier, _Stringifier);\n  function ScssStringifier() {\n    _classCallCheck(this, ScssStringifier);\n    return _possibleConstructorReturn(this, _Stringifier.apply(this, arguments));\n  }\n  ScssStringifier.prototype.comment = function comment(node) {\n    var left = this.raw(node, 'left', 'commentLeft');\n    var right = this.raw(node, 'right', 'commentRight');\n    if (node.raws.inline) {\n      this.builder('//' + left + node.text + right, node);\n    } else {\n      this.builder('/*' + left + node.text + right + '*/', node);\n    }\n  };\n  ScssStringifier.prototype.decl = function decl(node, semicolon) {\n    if (!node.isNested) {\n      _Stringifier.prototype.decl.call(this, node, semicolon);\n    } else {\n      var between = this.raw(node, 'between', 'colon');\n      var string = node.prop + between + this.rawValue(node, 'value');\n      if (node.important) {\n        string += node.raws.important || ' !important';\n      }\n      this.builder(string + '{', node, 'start');\n      var after = void 0;\n      if (node.nodes && node.nodes.length) {\n        this.body(node);\n        after = this.raw(node, 'after');\n      } else {\n        after = this.raw(node, 'after', 'emptyBody');\n      }\n      if (after) this.builder(after);\n      this.builder('}', node, 'end');\n    }\n  };\n  return ScssStringifier;\n}(_stringifier2.default);\nexports.default = ScssStringifier;\nmodule.exports = exports['default'];","map":{"version":3,"names":["_stringifier","require","ScssStringifier","comment","node","left","raw","right","raws","inline","builder","text","decl","semicolon","isNested","_Stringifier","prototype","call","between","string","prop","rawValue","important","after","nodes","length","body"],"sources":["\\source\\scss-stringifier.es6"],"sourcesContent":["import Stringifier from 'postcss/lib/stringifier';\n\nexport default class ScssStringifier extends Stringifier {\n\n    comment(node) {\n        let left  = this.raw(node, 'left',  'commentLeft');\n        let right = this.raw(node, 'right', 'commentRight');\n\n        if ( node.raws.inline ) {\n            this.builder('//' + left + node.text + right, node);\n        } else {\n            this.builder('/*' + left + node.text + right + '*/', node);\n        }\n    }\n\n    decl(node, semicolon) {\n        if ( !node.isNested ) {\n            super.decl(node, semicolon);\n        } else {\n\n            let between = this.raw(node, 'between', 'colon');\n            let string  = node.prop + between + this.rawValue(node, 'value');\n            if ( node.important ) {\n                string += node.raws.important || ' !important';\n            }\n\n            this.builder(string + '{', node, 'start');\n\n            let after;\n            if ( node.nodes && node.nodes.length ) {\n                this.body(node);\n                after = this.raw(node, 'after');\n            } else {\n                after = this.raw(node, 'after', 'emptyBody');\n            }\n            if ( after ) this.builder(after);\n            this.builder('}', node, 'end');\n        }\n    }\n\n}\n"],"mappings":";;;AAAA,IAAAA,YAAA,GAAAC,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBC,e;;;;;;4BAEjBC,O,oBAAQC,I,EAAM;IACV,IAAIC,IAAA,GAAQ,KAAKC,GAAL,CAASF,IAAT,EAAe,MAAf,EAAwB,aAAxB,CAAZ;IACA,IAAIG,KAAA,GAAQ,KAAKD,GAAL,CAASF,IAAT,EAAe,OAAf,EAAwB,cAAxB,CAAZ;IAEA,IAAKA,IAAA,CAAKI,IAAL,CAAUC,MAAf,EAAwB;MACpB,KAAKC,OAAL,CAAa,OAAOL,IAAP,GAAcD,IAAA,CAAKO,IAAnB,GAA0BJ,KAAvC,EAA8CH,IAA9C;IACH,CAFD,MAEO;MACH,KAAKM,OAAL,CAAa,OAAOL,IAAP,GAAcD,IAAA,CAAKO,IAAnB,GAA0BJ,KAA1B,GAAkC,IAA/C,EAAqDH,IAArD;IACH;EACJ,C;4BAEDQ,I,iBAAKR,I,EAAMS,S,EAAW;IAClB,IAAK,CAACT,IAAA,CAAKU,QAAX,EAAsB;MAClBC,YAAA,CAAAC,SAAA,CAAMJ,IAAN,CAAAK,IAAA,OAAWb,IAAX,EAAiBS,SAAjB;IACH,CAFD,MAEO;MAEH,IAAIK,OAAA,GAAU,KAAKZ,GAAL,CAASF,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAAd;MACA,IAAIe,MAAA,GAAUf,IAAA,CAAKgB,IAAL,GAAYF,OAAZ,GAAsB,KAAKG,QAAL,CAAcjB,IAAd,EAAoB,OAApB,CAApC;MACA,IAAKA,IAAA,CAAKkB,SAAV,EAAsB;QAClBH,MAAA,IAAUf,IAAA,CAAKI,IAAL,CAAUc,SAAV,IAAuB,aAAjC;MACH;MAED,KAAKZ,OAAL,CAAaS,MAAA,GAAS,GAAtB,EAA2Bf,IAA3B,EAAiC,OAAjC;MAEA,IAAImB,KAAA,SAAJ;MACA,IAAKnB,IAAA,CAAKoB,KAAL,IAAcpB,IAAA,CAAKoB,KAAL,CAAWC,MAA9B,EAAuC;QACnC,KAAKC,IAAL,CAAUtB,IAAV;QACAmB,KAAA,GAAQ,KAAKjB,GAAL,CAASF,IAAT,EAAe,OAAf,CAAR;MACH,CAHD,MAGO;QACHmB,KAAA,GAAQ,KAAKjB,GAAL,CAASF,IAAT,EAAe,OAAf,EAAwB,WAAxB,CAAR;MACH;MACD,IAAKmB,KAAL,EAAa,KAAKb,OAAL,CAAaa,KAAb;MACb,KAAKb,OAAL,CAAa,GAAb,EAAkBN,IAAlB,EAAwB,KAAxB;IACH;EACJ,C;;;kBApCgBF,e"},"metadata":{},"sourceType":"script","externalDependencies":[]}