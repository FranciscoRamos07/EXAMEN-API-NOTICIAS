{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list;\n *\n * @namespace list\n */\nvar list = {\n  split: function split(string, separators, last) {\n    var array = [];\n    var current = '';\n    var split = false;\n    var func = 0;\n    var quote = false;\n    var escape = false;\n    for (var i = 0; i < string.length; i++) {\n      var letter = string[i];\n      if (quote) {\n        if (escape) {\n          escape = false;\n        } else if (letter === '\\\\') {\n          escape = true;\n        } else if (letter === quote) {\n          quote = false;\n        }\n      } else if (letter === '\"' || letter === '\\'') {\n        quote = letter;\n      } else if (letter === '(') {\n        func += 1;\n      } else if (letter === ')') {\n        if (func > 0) func -= 1;\n      } else if (func === 0) {\n        if (separators.indexOf(letter) !== -1) split = true;\n      }\n      if (split) {\n        if (current !== '') array.push(current.trim());\n        current = '';\n        split = false;\n      } else {\n        current += letter;\n      }\n    }\n    if (last || current !== '') array.push(current.trim());\n    return array;\n  },\n  /**\n   * Safely splits space-separated values (such as those for `background`,\n   * `border-radius`, and other shorthand properties).\n   *\n   * @param {string} string - space-separated values\n   *\n   * @return {string[]} split values\n   *\n   * @example\n   * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n   */\n  space: function space(string) {\n    var spaces = [' ', '\\n', '\\t'];\n    return list.split(string, spaces);\n  },\n  /**\n   * Safely splits comma-separated values (such as those for `transition-*`\n   * and `background` properties).\n   *\n   * @param {string} string - comma-separated values\n   *\n   * @return {string[]} split values\n   *\n   * @example\n   * postcss.list.comma('black, linear-gradient(white, black)')\n   * //=> ['black', 'linear-gradient(white, black)']\n   */\n  comma: function comma(string) {\n    var comma = ',';\n    return list.split(string, [comma], true);\n  }\n};\nexports.default = list;\nmodule.exports = exports['default'];","map":{"version":3,"names":["list","split","string","separators","last","array","current","func","quote","escape","i","length","letter","indexOf","push","trim","space","spaces","comma"],"sources":["C:\\Users\\Francisco\\Documents\\GitHub\\examenApi\\EXAMEN-API-NOTICIAS\\node_modules\\perfectionist\\node_modules\\postcss\\lib\\list.es6"],"sourcesContent":["/**\n * Contains helpers for safely splitting lists of CSS values,\n * preserving parentheses and quotes.\n *\n * @example\n * const list = postcss.list;\n *\n * @namespace list\n */\nlet list = {\n\n    split(string, separators, last) {\n        let array   = [];\n        let current = '';\n        let split   = false;\n\n        let func    = 0;\n        let quote   = false;\n        let escape  = false;\n\n        for ( let i = 0; i < string.length; i++ ) {\n            let letter = string[i];\n\n            if ( quote ) {\n                if ( escape ) {\n                    escape = false;\n                } else if ( letter === '\\\\' ) {\n                    escape = true;\n                } else if ( letter === quote ) {\n                    quote = false;\n                }\n            } else if ( letter === '\"' || letter === '\\'' ) {\n                quote = letter;\n            } else if ( letter === '(' ) {\n                func += 1;\n            } else if ( letter === ')' ) {\n                if ( func > 0 ) func -= 1;\n            } else if ( func === 0 ) {\n                if ( separators.indexOf(letter) !== -1 ) split = true;\n            }\n\n            if ( split ) {\n                if ( current !== '' ) array.push(current.trim());\n                current = '';\n                split   = false;\n            } else {\n                current += letter;\n            }\n        }\n\n        if ( last || current !== '' ) array.push(current.trim());\n        return array;\n    },\n\n    /**\n     * Safely splits space-separated values (such as those for `background`,\n     * `border-radius`, and other shorthand properties).\n     *\n     * @param {string} string - space-separated values\n     *\n     * @return {string[]} split values\n     *\n     * @example\n     * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']\n     */\n    space(string) {\n        let spaces = [' ', '\\n', '\\t'];\n        return list.split(string, spaces);\n    },\n\n    /**\n     * Safely splits comma-separated values (such as those for `transition-*`\n     * and `background` properties).\n     *\n     * @param {string} string - comma-separated values\n     *\n     * @return {string[]} split values\n     *\n     * @example\n     * postcss.list.comma('black, linear-gradient(white, black)')\n     * //=> ['black', 'linear-gradient(white, black)']\n     */\n    comma(string) {\n        let comma = ',';\n        return list.split(string, [comma], true);\n    }\n\n};\n\nexport default list;\n"],"mappings":";;;AAAA;;;;;;;;;AASA,IAAIA,IAAA,GAAO;EAEPC,KAFO,WAAAA,MAEDC,MAFC,EAEOC,UAFP,EAEmBC,IAFnB,EAEyB;IAC5B,IAAIC,KAAA,GAAU,EAAd;IACA,IAAIC,OAAA,GAAU,EAAd;IACA,IAAIL,KAAA,GAAU,KAAd;IAEA,IAAIM,IAAA,GAAU,CAAd;IACA,IAAIC,KAAA,GAAU,KAAd;IACA,IAAIC,MAAA,GAAU,KAAd;IAEA,KAAM,IAAIC,CAAA,GAAI,CAAd,EAAiBA,CAAA,GAAIR,MAAA,CAAOS,MAA5B,EAAoCD,CAAA,EAApC,EAA0C;MACtC,IAAIE,MAAA,GAASV,MAAA,CAAOQ,CAAP,CAAb;MAEA,IAAKF,KAAL,EAAa;QACT,IAAKC,MAAL,EAAc;UACVA,MAAA,GAAS,KAAT;QACH,CAFD,MAEO,IAAKG,MAAA,KAAW,IAAhB,EAAuB;UAC1BH,MAAA,GAAS,IAAT;QACH,CAFM,MAEA,IAAKG,MAAA,KAAWJ,KAAhB,EAAwB;UAC3BA,KAAA,GAAQ,KAAR;QACH;MACJ,CARD,MAQO,IAAKI,MAAA,KAAW,GAAX,IAAkBA,MAAA,KAAW,IAAlC,EAAyC;QAC5CJ,KAAA,GAAQI,MAAR;MACH,CAFM,MAEA,IAAKA,MAAA,KAAW,GAAhB,EAAsB;QACzBL,IAAA,IAAQ,CAAR;MACH,CAFM,MAEA,IAAKK,MAAA,KAAW,GAAhB,EAAsB;QACzB,IAAKL,IAAA,GAAO,CAAZ,EAAgBA,IAAA,IAAQ,CAAR;MACnB,CAFM,MAEA,IAAKA,IAAA,KAAS,CAAd,EAAkB;QACrB,IAAKJ,UAAA,CAAWU,OAAX,CAAmBD,MAAnB,MAA+B,CAAC,CAArC,EAAyCX,KAAA,GAAQ,IAAR;MAC5C;MAED,IAAKA,KAAL,EAAa;QACT,IAAKK,OAAA,KAAY,EAAjB,EAAsBD,KAAA,CAAMS,IAAN,CAAWR,OAAA,CAAQS,IAAR,EAAX;QACtBT,OAAA,GAAU,EAAV;QACAL,KAAA,GAAU,KAAV;MACH,CAJD,MAIO;QACHK,OAAA,IAAWM,MAAX;MACH;IACJ;IAED,IAAKR,IAAA,IAAQE,OAAA,KAAY,EAAzB,EAA8BD,KAAA,CAAMS,IAAN,CAAWR,OAAA,CAAQS,IAAR,EAAX;IAC9B,OAAOV,KAAP;EACH,CA3CM;EA6CP;;;;;;;;;;;EAWAW,KAxDO,WAAAA,MAwDDd,MAxDC,EAwDO;IACV,IAAIe,MAAA,GAAS,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAb;IACA,OAAOjB,IAAA,CAAKC,KAAL,CAAWC,MAAX,EAAmBe,MAAnB,CAAP;EACH,CA3DM;EA6DP;;;;;;;;;;;;EAYAC,KAzEO,WAAAA,MAyEDhB,MAzEC,EAyEO;IACV,IAAIgB,KAAA,GAAQ,GAAZ;IACA,OAAOlB,IAAA,CAAKC,KAAL,CAAWC,MAAX,EAAmB,CAACgB,KAAD,CAAnB,EAA4B,IAA5B,CAAP;EACH;AA5EM,CAAX;kBAgFelB,I"},"metadata":{},"sourceType":"script","externalDependencies":[]}