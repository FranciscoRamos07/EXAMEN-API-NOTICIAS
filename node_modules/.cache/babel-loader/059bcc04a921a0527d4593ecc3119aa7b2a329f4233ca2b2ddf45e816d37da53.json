{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _warnOnce = require('./warn-once');\nvar _warnOnce2 = _interopRequireDefault(_warnOnce);\nvar _node = require('./node');\nvar _node2 = _interopRequireDefault(_node);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * Represents a comment between declarations or statements (rule and at-rules).\n *\n * Comments inside selectors, at-rule parameters, or declaration values\n * will be stored in the `raws` properties explained above.\n *\n * @extends Node\n */\nvar Comment = function (_Node) {\n  _inherits(Comment, _Node);\n  function Comment(defaults) {\n    _classCallCheck(this, Comment);\n    var _this = _possibleConstructorReturn(this, _Node.call(this, defaults));\n    _this.type = 'comment';\n    return _this;\n  }\n  _createClass(Comment, [{\n    key: 'left',\n    get: function get() {\n      (0, _warnOnce2.default)('Comment#left was deprecated. Use Comment#raws.left');\n      return this.raws.left;\n    },\n    set: function set(val) {\n      (0, _warnOnce2.default)('Comment#left was deprecated. Use Comment#raws.left');\n      this.raws.left = val;\n    }\n  }, {\n    key: 'right',\n    get: function get() {\n      (0, _warnOnce2.default)('Comment#right was deprecated. Use Comment#raws.right');\n      return this.raws.right;\n    },\n    set: function set(val) {\n      (0, _warnOnce2.default)('Comment#right was deprecated. Use Comment#raws.right');\n      this.raws.right = val;\n    }\n\n    /**\n     * @memberof Comment#\n     * @member {string} text - the comment’s text\n     */\n\n    /**\n     * @memberof Comment#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `before`: the space symbols before the node.\n     * * `left`: the space symbols between `/*` and the comment’s text.\n     * * `right`: the space symbols between the comment’s text.\n     */\n  }]);\n\n  return Comment;\n}(_node2.default);\nexports.default = Comment;\nmodule.exports = exports['default'];","map":{"version":3,"names":["_warnOnce","require","_node","Comment","defaults","_classCallCheck","_this","_possibleConstructorReturn","_Node","call","type","_warnOnce2","default","raws","left","val","right"],"sources":["C:\\Users\\Francisco\\Documents\\GitHub\\examenApi\\EXAMEN-API-NOTICIAS\\node_modules\\perfectionist\\node_modules\\postcss\\lib\\comment.es6"],"sourcesContent":["import warnOnce from './warn-once';\nimport Node     from './node';\n\n/**\n * Represents a comment between declarations or statements (rule and at-rules).\n *\n * Comments inside selectors, at-rule parameters, or declaration values\n * will be stored in the `raws` properties explained above.\n *\n * @extends Node\n */\nclass Comment extends Node {\n\n    constructor(defaults) {\n        super(defaults);\n        this.type = 'comment';\n    }\n\n    get left() {\n        warnOnce('Comment#left was deprecated. Use Comment#raws.left');\n        return this.raws.left;\n    }\n\n    set left(val) {\n        warnOnce('Comment#left was deprecated. Use Comment#raws.left');\n        this.raws.left = val;\n    }\n\n    get right() {\n        warnOnce('Comment#right was deprecated. Use Comment#raws.right');\n        return this.raws.right;\n    }\n\n    set right(val) {\n        warnOnce('Comment#right was deprecated. Use Comment#raws.right');\n        this.raws.right = val;\n    }\n\n    /**\n     * @memberof Comment#\n     * @member {string} text - the comment’s text\n     */\n\n    /**\n     * @memberof Comment#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `before`: the space symbols before the node.\n     * * `left`: the space symbols between `/*` and the comment’s text.\n     * * `right`: the space symbols between the comment’s text.\n     */\n}\n\nexport default Comment;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;;AACA,IAAAC,KAAA,GAAAD,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;IAQME,O;;EAEF,SAAAA,QAAYC,QAAZ,EAAsB;IAAAC,eAAA,OAAAF,OAAA;IAAA,IAAAG,KAAA,GAAAC,0BAAA,OAClBC,KAAA,CAAAC,IAAA,OAAML,QAAN,CADkB;IAElBE,KAAA,CAAKI,IAAL,GAAY,SAAZ;IAFkB,OAAAJ,KAAA;EAGrB;;;wBAEU;MACP,IAAAK,UAAA,CAAAC,OAAA,EAAS,oDAAT;MACA,OAAO,KAAKC,IAAL,CAAUC,IAAjB;IACH,C;sBAEQC,G,EAAK;MACV,IAAAJ,UAAA,CAAAC,OAAA,EAAS,oDAAT;MACA,KAAKC,IAAL,CAAUC,IAAV,GAAiBC,GAAjB;IACH;;;wBAEW;MACR,IAAAJ,UAAA,CAAAC,OAAA,EAAS,sDAAT;MACA,OAAO,KAAKC,IAAL,CAAUG,KAAjB;IACH,C;sBAESD,G,EAAK;MACX,IAAAJ,UAAA,CAAAC,OAAA,EAAS,sDAAT;MACA,KAAKC,IAAL,CAAUG,KAAV,GAAkBD,GAAlB;IACH;;IAED;;;;;IAKA;;;;;;;;;;;;;;;;kBAcWZ,O"},"metadata":{},"sourceType":"script","externalDependencies":[]}