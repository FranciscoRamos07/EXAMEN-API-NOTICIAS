{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = parse;\nvar _parser = require('./parser');\nvar _parser2 = _interopRequireDefault(_parser);\nvar _input = require('./input');\nvar _input2 = _interopRequireDefault(_input);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction parse(css, opts) {\n  if (opts && opts.safe) {\n    throw new Error('Option safe was removed. ' + 'Use parser: require(\"postcss-safe-parser\")');\n  }\n  var input = new _input2.default(css, opts);\n  var parser = new _parser2.default(input);\n  try {\n    parser.tokenize();\n    parser.loop();\n  } catch (e) {\n    if (e.name === 'CssSyntaxError' && opts && opts.from) {\n      if (/\\.scss$/i.test(opts.from)) {\n        e.message += '\\nYou tried to parse SCSS with ' + 'the standard CSS parser; ' + 'try again with the postcss-scss parser';\n      } else if (/\\.sass/i.test(opts.from)) {\n        e.message += '\\nYou tried to parse Sass with ' + 'the standard CSS parser; ' + 'try again with the postcss-sass parser';\n      } else if (/\\.less$/i.test(opts.from)) {\n        e.message += '\\nYou tried to parse Less with ' + 'the standard CSS parser; ' + 'try again with the postcss-less parser';\n      }\n    }\n    throw e;\n  }\n  return parser.root;\n}\nmodule.exports = exports['default'];","map":{"version":3,"names":["parse","_parser","require","_input","css","opts","safe","Error","input","_input2","default","parser","_parser2","tokenize","loop","e","name","from","test","message","root"],"sources":["C:\\Users\\Francisco\\Documents\\GitHub\\examenApi\\EXAMEN-API-NOTICIAS\\node_modules\\postcss-scss\\node_modules\\postcss\\lib\\parse.es6"],"sourcesContent":["import Parser from './parser';\nimport Input  from './input';\n\nexport default function parse(css, opts) {\n    if ( opts && opts.safe ) {\n        throw new Error('Option safe was removed. ' +\n                        'Use parser: require(\"postcss-safe-parser\")');\n    }\n\n    let input = new Input(css, opts);\n\n    let parser = new Parser(input);\n    try {\n        parser.tokenize();\n        parser.loop();\n    } catch (e) {\n        if ( e.name === 'CssSyntaxError' && opts && opts.from ) {\n            if ( /\\.scss$/i.test(opts.from) ) {\n                e.message += '\\nYou tried to parse SCSS with ' +\n                             'the standard CSS parser; ' +\n                             'try again with the postcss-scss parser';\n            } else if ( /\\.sass/i.test(opts.from) ) {\n                e.message += '\\nYou tried to parse Sass with ' +\n                             'the standard CSS parser; ' +\n                             'try again with the postcss-sass parser';\n            } else if ( /\\.less$/i.test(opts.from) ) {\n                e.message += '\\nYou tried to parse Less with ' +\n                             'the standard CSS parser; ' +\n                             'try again with the postcss-less parser';\n            }\n        }\n        throw e;\n    }\n\n    return parser.root;\n}\n"],"mappings":";;;kBAGwBA,K;AAHxB,IAAAC,OAAA,GAAAC,OAAA;;AACA,IAAAC,MAAA,GAAAD,OAAA;;;;;;;AAEe,SAASF,KAATA,CAAeI,GAAf,EAAoBC,IAApB,EAA0B;EACrC,IAAKA,IAAA,IAAQA,IAAA,CAAKC,IAAlB,EAAyB;IACrB,MAAM,IAAIC,KAAJ,CAAU,8BACA,4CADV,CAAN;EAEH;EAED,IAAIC,KAAA,GAAQ,IAAAC,OAAA,CAAAC,OAAA,CAAUN,GAAV,EAAeC,IAAf,CAAZ;EAEA,IAAIM,MAAA,GAAS,IAAAC,QAAA,CAAAF,OAAA,CAAWF,KAAX,CAAb;EACA,IAAI;IACAG,MAAA,CAAOE,QAAP;IACAF,MAAA,CAAOG,IAAP;EACH,CAHD,CAGE,OAAOC,CAAP,EAAU;IACR,IAAKA,CAAA,CAAEC,IAAF,KAAW,gBAAX,IAA+BX,IAA/B,IAAuCA,IAAA,CAAKY,IAAjD,EAAwD;MACpD,IAAK,WAAWC,IAAX,CAAgBb,IAAA,CAAKY,IAArB,CAAL,EAAkC;QAC9BF,CAAA,CAAEI,OAAF,IAAa,oCACA,2BADA,GAEA,wCAFb;MAGH,CAJD,MAIO,IAAK,UAAUD,IAAV,CAAeb,IAAA,CAAKY,IAApB,CAAL,EAAiC;QACpCF,CAAA,CAAEI,OAAF,IAAa,oCACA,2BADA,GAEA,wCAFb;MAGH,CAJM,MAIA,IAAK,WAAWD,IAAX,CAAgBb,IAAA,CAAKY,IAArB,CAAL,EAAkC;QACrCF,CAAA,CAAEI,OAAF,IAAa,oCACA,2BADA,GAEA,wCAFb;MAGH;IACJ;IACD,MAAMJ,CAAN;EACH;EAED,OAAOJ,MAAA,CAAOS,IAAd;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}