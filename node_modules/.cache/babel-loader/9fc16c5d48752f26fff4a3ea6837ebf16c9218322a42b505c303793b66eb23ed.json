{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _container = require('./container');\nvar _container2 = _interopRequireDefault(_container);\nvar _warnOnce = require('./warn-once');\nvar _warnOnce2 = _interopRequireDefault(_warnOnce);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{color:black} b{z-index:2}');\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n */\nvar Root = function (_Container) {\n  _inherits(Root, _Container);\n  function Root(defaults) {\n    _classCallCheck(this, Root);\n    var _this = _possibleConstructorReturn(this, _Container.call(this, defaults));\n    _this.type = 'root';\n    if (!_this.nodes) _this.nodes = [];\n    return _this;\n  }\n  Root.prototype.removeChild = function removeChild(child) {\n    child = this.index(child);\n    if (child === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[child].raws.before;\n    }\n    return _Container.prototype.removeChild.call(this, child);\n  };\n  Root.prototype.normalize = function normalize(child, sample, type) {\n    var nodes = _Container.prototype.normalize.call(this, child);\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before;\n        } else {\n          delete sample.raws.before;\n        }\n      } else if (this.first !== sample) {\n        for (var _iterator = nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n          var node = _ref;\n          node.raws.before = sample.raws.before;\n        }\n      }\n    }\n    return nodes;\n  };\n\n  /**\n   * Returns a {@link Result} instance representing the root’s CSS.\n   *\n   * @param {processOptions} [opts] - options with only `to` and `map` keys\n   *\n   * @return {Result} result with current root’s CSS\n   *\n   * @example\n   * const root1 = postcss.parse(css1, { from: 'a.css' });\n   * const root2 = postcss.parse(css2, { from: 'b.css' });\n   * root1.append(root2);\n   * const result = root1.toResult({ to: 'all.css', map: true });\n   */\n\n  Root.prototype.toResult = function toResult() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var LazyResult = require('./lazy-result');\n    var Processor = require('./processor');\n    var lazy = new LazyResult(new Processor(), this, opts);\n    return lazy.stringify();\n  };\n  Root.prototype.remove = function remove(child) {\n    (0, _warnOnce2.default)('Root#remove is deprecated. Use Root#removeChild');\n    this.removeChild(child);\n  };\n  Root.prototype.prevMap = function prevMap() {\n    (0, _warnOnce2.default)('Root#prevMap is deprecated. Use Root#source.input.map');\n    return this.source.input.map;\n  };\n\n  /**\n   * @memberof Root#\n   * @member {object} raws - Information to generate byte-to-byte equal\n   *                         node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `after`: the space symbols after the last child to the end of file.\n   * * `semicolon`: is the last child has an (optional) semicolon.\n   *\n   * @example\n   * postcss.parse('a {}\\n').raws //=> { after: '\\n' }\n   * postcss.parse('a {}').raws   //=> { after: '' }\n   */\n\n  return Root;\n}(_container2.default);\nexports.default = Root;\nmodule.exports = exports['default'];","map":{"version":3,"names":["_container","require","_warnOnce","Root","defaults","_classCallCheck","_this","_possibleConstructorReturn","_Container","call","type","nodes","removeChild","child","index","length","raws","before","prototype","normalize","sample","first","_iterator","_isArray","Array","isArray","_i","Symbol","iterator","_ref","next","done","value","node","toResult","opts","arguments","undefined","LazyResult","Processor","lazy","stringify","remove","_warnOnce2","default","prevMap","source","input","map"],"sources":["C:\\Users\\Francisco\\Documents\\GitHub\\examenApi\\EXAMEN-API-NOTICIAS\\node_modules\\perfectionist\\node_modules\\postcss\\lib\\root.es6"],"sourcesContent":["import Container from './container';\nimport warnOnce  from './warn-once';\n\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{color:black} b{z-index:2}');\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n */\nclass Root extends Container {\n\n    constructor(defaults) {\n        super(defaults);\n        this.type = 'root';\n        if ( !this.nodes ) this.nodes = [];\n    }\n\n    removeChild(child) {\n        child = this.index(child);\n\n        if ( child === 0 && this.nodes.length > 1 ) {\n            this.nodes[1].raws.before = this.nodes[child].raws.before;\n        }\n\n        return super.removeChild(child);\n    }\n\n    normalize(child, sample, type) {\n        let nodes = super.normalize(child);\n\n        if ( sample ) {\n            if ( type === 'prepend' ) {\n                if ( this.nodes.length > 1 ) {\n                    sample.raws.before = this.nodes[1].raws.before;\n                } else {\n                    delete sample.raws.before;\n                }\n            } else if ( this.first !== sample ) {\n                for ( let node of nodes ) {\n                    node.raws.before = sample.raws.before;\n                }\n            }\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Returns a {@link Result} instance representing the root’s CSS.\n     *\n     * @param {processOptions} [opts] - options with only `to` and `map` keys\n     *\n     * @return {Result} result with current root’s CSS\n     *\n     * @example\n     * const root1 = postcss.parse(css1, { from: 'a.css' });\n     * const root2 = postcss.parse(css2, { from: 'b.css' });\n     * root1.append(root2);\n     * const result = root1.toResult({ to: 'all.css', map: true });\n     */\n    toResult(opts = { }) {\n        let LazyResult = require('./lazy-result');\n        let Processor  = require('./processor');\n\n        let lazy = new LazyResult(new Processor(), this, opts);\n        return lazy.stringify();\n    }\n\n    remove(child) {\n        warnOnce('Root#remove is deprecated. Use Root#removeChild');\n        this.removeChild(child);\n    }\n\n    prevMap() {\n        warnOnce('Root#prevMap is deprecated. Use Root#source.input.map');\n        return this.source.input.map;\n    }\n\n    /**\n     * @memberof Root#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `after`: the space symbols after the last child to the end of file.\n     * * `semicolon`: is the last child has an (optional) semicolon.\n     *\n     * @example\n     * postcss.parse('a {}\\n').raws //=> { after: '\\n' }\n     * postcss.parse('a {}').raws   //=> { after: '' }\n     */\n\n}\n\nexport default Root;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}