{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _parser = require(\"./parser\");\nvar _parser2 = _interopRequireDefault(_parser);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar Processor = function () {\n  function Processor(func, options) {\n    _classCallCheck(this, Processor);\n    this.func = func || function noop() {};\n    this.funcRes = null;\n    this.options = options;\n  }\n  Processor.prototype._shouldUpdateSelector = function _shouldUpdateSelector(rule) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var merged = Object.assign({}, this.options, options);\n    if (merged.updateSelector === false) {\n      return false;\n    } else {\n      return typeof rule !== \"string\";\n    }\n  };\n  Processor.prototype._isLossy = function _isLossy() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var merged = Object.assign({}, this.options, options);\n    if (merged.lossless === false) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  Processor.prototype._root = function _root(rule) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var parser = new _parser2.default(rule, this._parseOptions(options));\n    return parser.root;\n  };\n  Processor.prototype._parseOptions = function _parseOptions(options) {\n    return {\n      lossy: this._isLossy(options)\n    };\n  };\n  Processor.prototype._run = function _run(rule) {\n    var _this = this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new Promise(function (resolve, reject) {\n      try {\n        var root = _this._root(rule, options);\n        Promise.resolve(_this.func(root)).then(function (transform) {\n          var string = undefined;\n          if (_this._shouldUpdateSelector(rule, options)) {\n            string = root.toString();\n            rule.selector = string;\n          }\n          return {\n            transform: transform,\n            root: root,\n            string: string\n          };\n        }).then(resolve, reject);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n    });\n  };\n  Processor.prototype._runSync = function _runSync(rule) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var root = this._root(rule, options);\n    var transform = this.func(root);\n    if (transform && typeof transform.then === \"function\") {\n      throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n    }\n    var string = undefined;\n    if (options.updateSelector && typeof rule !== \"string\") {\n      string = root.toString();\n      rule.selector = string;\n    }\n    return {\n      transform: transform,\n      root: root,\n      string: string\n    };\n  };\n\n  /**\n   * Process rule into a selector AST.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n   */\n\n  Processor.prototype.ast = function ast(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.root;\n    });\n  };\n\n  /**\n   * Process rule into a selector AST synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {parser.Root} The AST of the selector after processing it.\n   */\n\n  Processor.prototype.astSync = function astSync(rule, options) {\n    return this._runSync(rule, options).root;\n  };\n\n  /**\n   * Process a selector into a transformed value asynchronously\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {Promise<any>} The value returned by the processor.\n   */\n\n  Processor.prototype.transform = function transform(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.transform;\n    });\n  };\n\n  /**\n   * Process a selector into a transformed value synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {any} The value returned by the processor.\n   */\n\n  Processor.prototype.transformSync = function transformSync(rule, options) {\n    return this._runSync(rule, options).transform;\n  };\n\n  /**\n   * Process a selector into a new selector string asynchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n\n  Processor.prototype.process = function process(rule, options) {\n    return this._run(rule, options).then(function (result) {\n      return result.string || result.root.toString();\n    });\n  };\n\n  /**\n   * Process a selector into a new selector string synchronously.\n   *\n   * @param rule {postcss.Rule | string} The css selector to be processed\n   * @param options The options for processing\n   * @returns {string} the selector after processing.\n   */\n\n  Processor.prototype.processSync = function processSync(rule, options) {\n    var result = this._runSync(rule, options);\n    return result.string || result.root.toString();\n  };\n  return Processor;\n}();\nexports.default = Processor;\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["exports","__esModule","_parser","require","_parser2","_interopRequireDefault","obj","default","_classCallCheck","instance","Constructor","TypeError","Processor","func","options","noop","funcRes","prototype","_shouldUpdateSelector","rule","arguments","length","undefined","merged","Object","assign","updateSelector","_isLossy","lossless","_root","parser","_parseOptions","root","lossy","_run","_this","Promise","resolve","reject","then","transform","string","toString","selector","e","_runSync","Error","ast","result","astSync","transformSync","process","processSync","module"],"sources":["C:/Users/Francisco/Documents/GitHub/examenApi/EXAMEN-API-NOTICIAS/node_modules/tailwindcss/node_modules/postcss-selector-parser/dist/processor.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n\nvar _parser = require(\"./parser\");\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Processor = function () {\n    function Processor(func, options) {\n        _classCallCheck(this, Processor);\n\n        this.func = func || function noop() {};\n        this.funcRes = null;\n        this.options = options;\n    }\n\n    Processor.prototype._shouldUpdateSelector = function _shouldUpdateSelector(rule) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var merged = Object.assign({}, this.options, options);\n        if (merged.updateSelector === false) {\n            return false;\n        } else {\n            return typeof rule !== \"string\";\n        }\n    };\n\n    Processor.prototype._isLossy = function _isLossy() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var merged = Object.assign({}, this.options, options);\n        if (merged.lossless === false) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    Processor.prototype._root = function _root(rule) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var parser = new _parser2.default(rule, this._parseOptions(options));\n        return parser.root;\n    };\n\n    Processor.prototype._parseOptions = function _parseOptions(options) {\n        return {\n            lossy: this._isLossy(options)\n        };\n    };\n\n    Processor.prototype._run = function _run(rule) {\n        var _this = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        return new Promise(function (resolve, reject) {\n            try {\n                var root = _this._root(rule, options);\n                Promise.resolve(_this.func(root)).then(function (transform) {\n                    var string = undefined;\n                    if (_this._shouldUpdateSelector(rule, options)) {\n                        string = root.toString();\n                        rule.selector = string;\n                    }\n                    return { transform: transform, root: root, string: string };\n                }).then(resolve, reject);\n            } catch (e) {\n                reject(e);\n                return;\n            }\n        });\n    };\n\n    Processor.prototype._runSync = function _runSync(rule) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var root = this._root(rule, options);\n        var transform = this.func(root);\n        if (transform && typeof transform.then === \"function\") {\n            throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n        }\n        var string = undefined;\n        if (options.updateSelector && typeof rule !== \"string\") {\n            string = root.toString();\n            rule.selector = string;\n        }\n        return { transform: transform, root: root, string: string };\n    };\n\n    /**\n     * Process rule into a selector AST.\n     *\n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n     */\n\n\n    Processor.prototype.ast = function ast(rule, options) {\n        return this._run(rule, options).then(function (result) {\n            return result.root;\n        });\n    };\n\n    /**\n     * Process rule into a selector AST synchronously.\n     *\n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {parser.Root} The AST of the selector after processing it.\n     */\n\n\n    Processor.prototype.astSync = function astSync(rule, options) {\n        return this._runSync(rule, options).root;\n    };\n\n    /**\n     * Process a selector into a transformed value asynchronously\n     *\n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {Promise<any>} The value returned by the processor.\n     */\n\n\n    Processor.prototype.transform = function transform(rule, options) {\n        return this._run(rule, options).then(function (result) {\n            return result.transform;\n        });\n    };\n\n    /**\n     * Process a selector into a transformed value synchronously.\n     *\n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {any} The value returned by the processor.\n     */\n\n\n    Processor.prototype.transformSync = function transformSync(rule, options) {\n        return this._runSync(rule, options).transform;\n    };\n\n    /**\n     * Process a selector into a new selector string asynchronously.\n     *\n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {string} the selector after processing.\n     */\n\n\n    Processor.prototype.process = function process(rule, options) {\n        return this._run(rule, options).then(function (result) {\n            return result.string || result.root.toString();\n        });\n    };\n\n    /**\n     * Process a selector into a new selector string synchronously.\n     *\n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {string} the selector after processing.\n     */\n\n\n    Processor.prototype.processSync = function processSync(rule, options) {\n        var result = this._runSync(rule, options);\n        return result.string || result.root.toString();\n    };\n\n    return Processor;\n}();\n\nexports.default = Processor;\nmodule.exports = exports[\"default\"];"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}