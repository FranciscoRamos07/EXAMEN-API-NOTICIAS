{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = tokenize;\nvar SINGLE_QUOTE = 39;\nvar DOUBLE_QUOTE = 34;\nvar BACKSLASH = 92;\nvar SLASH = 47;\nvar NEWLINE = 10;\nvar SPACE = 32;\nvar FEED = 12;\nvar TAB = 9;\nvar CR = 13;\nvar OPEN_SQUARE = 91;\nvar CLOSE_SQUARE = 93;\nvar OPEN_PARENTHESES = 40;\nvar CLOSE_PARENTHESES = 41;\nvar OPEN_CURLY = 123;\nvar CLOSE_CURLY = 125;\nvar SEMICOLON = 59;\nvar ASTERISK = 42;\nvar COLON = 58;\nvar AT = 64;\nvar RE_AT_END = /[ \\n\\t\\r\\f\\{\\(\\)'\"\\\\;/\\[\\]#]/g;\nvar RE_WORD_END = /[ \\n\\t\\r\\f\\(\\)\\{\\}:;@!'\"\\\\\\]\\[#]|\\/(?=\\*)/g;\nvar RE_BAD_BRACKET = /.[\\\\\\/\\(\"'\\n]/;\nfunction tokenize(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var tokens = [];\n  var css = input.css.valueOf();\n  var ignore = options.ignoreErrors;\n  var code = void 0,\n    next = void 0,\n    quote = void 0,\n    lines = void 0,\n    last = void 0,\n    content = void 0,\n    escape = void 0,\n    nextLine = void 0,\n    nextOffset = void 0,\n    escaped = void 0,\n    escapePos = void 0,\n    prev = void 0,\n    n = void 0;\n  var length = css.length;\n  var offset = -1;\n  var line = 1;\n  var pos = 0;\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, line, pos - offset);\n  }\n  while (pos < length) {\n    code = css.charCodeAt(pos);\n    if (code === NEWLINE || code === FEED || code === CR && css.charCodeAt(pos + 1) !== NEWLINE) {\n      offset = pos;\n      line += 1;\n    }\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED:\n        next = pos;\n        do {\n          next += 1;\n          code = css.charCodeAt(next);\n          if (code === NEWLINE) {\n            offset = next;\n            line += 1;\n          }\n        } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);\n        tokens.push(['space', css.slice(pos, next)]);\n        pos = next - 1;\n        break;\n      case OPEN_SQUARE:\n        tokens.push(['[', '[', line, pos - offset]);\n        break;\n      case CLOSE_SQUARE:\n        tokens.push([']', ']', line, pos - offset]);\n        break;\n      case OPEN_CURLY:\n        tokens.push(['{', '{', line, pos - offset]);\n        break;\n      case CLOSE_CURLY:\n        tokens.push(['}', '}', line, pos - offset]);\n        break;\n      case COLON:\n        tokens.push([':', ':', line, pos - offset]);\n        break;\n      case SEMICOLON:\n        tokens.push([';', ';', line, pos - offset]);\n        break;\n      case OPEN_PARENTHESES:\n        prev = tokens.length ? tokens[tokens.length - 1][1] : '';\n        n = css.charCodeAt(pos + 1);\n        if (prev === 'url' && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {\n          next = pos;\n          do {\n            escaped = false;\n            next = css.indexOf(')', next + 1);\n            if (next === -1) {\n              if (ignore) {\n                next = pos;\n                break;\n              } else {\n                unclosed('bracket');\n              }\n            }\n            escapePos = next;\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1;\n              escaped = !escaped;\n            }\n          } while (escaped);\n          tokens.push(['brackets', css.slice(pos, next + 1), line, pos - offset, line, next - offset]);\n          pos = next;\n        } else {\n          next = css.indexOf(')', pos + 1);\n          content = css.slice(pos, next + 1);\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            tokens.push(['(', '(', line, pos - offset]);\n          } else {\n            tokens.push(['brackets', content, line, pos - offset, line, next - offset]);\n            pos = next;\n          }\n        }\n        break;\n      case CLOSE_PARENTHESES:\n        tokens.push([')', ')', line, pos - offset]);\n        break;\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE:\n        quote = code === SINGLE_QUOTE ? '\\'' : '\"';\n        next = pos;\n        do {\n          escaped = false;\n          next = css.indexOf(quote, next + 1);\n          if (next === -1) {\n            if (ignore) {\n              next = pos + 1;\n              break;\n            } else {\n              unclosed('string');\n            }\n          }\n          escapePos = next;\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1;\n            escaped = !escaped;\n          }\n        } while (escaped);\n        content = css.slice(pos, next + 1);\n        lines = content.split('\\n');\n        last = lines.length - 1;\n        if (last > 0) {\n          nextLine = line + last;\n          nextOffset = next - lines[last].length;\n        } else {\n          nextLine = line;\n          nextOffset = offset;\n        }\n        tokens.push(['string', css.slice(pos, next + 1), line, pos - offset, nextLine, next - nextOffset]);\n        offset = nextOffset;\n        line = nextLine;\n        pos = next;\n        break;\n      case AT:\n        RE_AT_END.lastIndex = pos + 1;\n        RE_AT_END.test(css);\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1;\n        } else {\n          next = RE_AT_END.lastIndex - 2;\n        }\n        tokens.push(['at-word', css.slice(pos, next + 1), line, pos - offset, line, next - offset]);\n        pos = next;\n        break;\n      case BACKSLASH:\n        next = pos;\n        escape = true;\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1;\n          escape = !escape;\n        }\n        code = css.charCodeAt(next + 1);\n        if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {\n          next += 1;\n        }\n        tokens.push(['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset]);\n        pos = next;\n        break;\n      default:\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1;\n          if (next === 0) {\n            if (ignore) {\n              next = css.length;\n            } else {\n              unclosed('comment');\n            }\n          }\n          content = css.slice(pos, next + 1);\n          lines = content.split('\\n');\n          last = lines.length - 1;\n          if (last > 0) {\n            nextLine = line + last;\n            nextOffset = next - lines[last].length;\n          } else {\n            nextLine = line;\n            nextOffset = offset;\n          }\n          tokens.push(['comment', content, line, pos - offset, nextLine, next - nextOffset]);\n          offset = nextOffset;\n          line = nextLine;\n          pos = next;\n        } else {\n          RE_WORD_END.lastIndex = pos + 1;\n          RE_WORD_END.test(css);\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1;\n          } else {\n            next = RE_WORD_END.lastIndex - 2;\n          }\n          tokens.push(['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset]);\n          pos = next;\n        }\n        break;\n    }\n    pos++;\n  }\n  return tokens;\n}\nmodule.exports = exports['default'];","map":{"version":3,"names":["tokenize","SINGLE_QUOTE","DOUBLE_QUOTE","BACKSLASH","SLASH","NEWLINE","SPACE","FEED","TAB","CR","OPEN_SQUARE","CLOSE_SQUARE","OPEN_PARENTHESES","CLOSE_PARENTHESES","OPEN_CURLY","CLOSE_CURLY","SEMICOLON","ASTERISK","COLON","AT","RE_AT_END","RE_WORD_END","RE_BAD_BRACKET","input","options","arguments","length","undefined","tokens","css","valueOf","ignore","ignoreErrors","code","next","quote","lines","last","content","escape","nextLine","nextOffset","escaped","escapePos","prev","n","offset","line","pos","unclosed","what","error","charCodeAt","push","slice","indexOf","test","split","lastIndex"],"sources":["C:\\Users\\Francisco\\Documents\\GitHub\\examenApi\\EXAMEN-API-NOTICIAS\\node_modules\\perfectionist\\node_modules\\postcss\\lib\\tokenize.es6"],"sourcesContent":["const SINGLE_QUOTE      = '\\''.charCodeAt(0);\nconst DOUBLE_QUOTE      =  '\"'.charCodeAt(0);\nconst BACKSLASH         = '\\\\'.charCodeAt(0);\nconst SLASH             =  '/'.charCodeAt(0);\nconst NEWLINE           = '\\n'.charCodeAt(0);\nconst SPACE             =  ' '.charCodeAt(0);\nconst FEED              = '\\f'.charCodeAt(0);\nconst TAB               = '\\t'.charCodeAt(0);\nconst CR                = '\\r'.charCodeAt(0);\nconst OPEN_SQUARE       =  '['.charCodeAt(0);\nconst CLOSE_SQUARE      =  ']'.charCodeAt(0);\nconst OPEN_PARENTHESES  =  '('.charCodeAt(0);\nconst CLOSE_PARENTHESES =  ')'.charCodeAt(0);\nconst OPEN_CURLY        =  '{'.charCodeAt(0);\nconst CLOSE_CURLY       =  '}'.charCodeAt(0);\nconst SEMICOLON         =  ';'.charCodeAt(0);\nconst ASTERISK          =  '*'.charCodeAt(0);\nconst COLON             =  ':'.charCodeAt(0);\nconst AT                =  '@'.charCodeAt(0);\n\nconst RE_AT_END      = /[ \\n\\t\\r\\f\\{\\(\\)'\"\\\\;/\\[\\]#]/g;\nconst RE_WORD_END    = /[ \\n\\t\\r\\f\\(\\)\\{\\}:;@!'\"\\\\\\]\\[#]|\\/(?=\\*)/g;\nconst RE_BAD_BRACKET = /.[\\\\\\/\\(\"'\\n]/;\n\nexport default function tokenize(input, options = { }) {\n    let tokens = [];\n    let css    = input.css.valueOf();\n\n    let ignore = options.ignoreErrors;\n\n    let code, next, quote, lines, last, content, escape,\n        nextLine, nextOffset, escaped, escapePos, prev, n;\n\n    let length = css.length;\n    let offset = -1;\n    let line   =  1;\n    let pos    =  0;\n\n    function unclosed(what) {\n        throw input.error('Unclosed ' + what, line, pos - offset);\n    }\n\n    while ( pos < length ) {\n        code = css.charCodeAt(pos);\n\n        if ( code === NEWLINE || code === FEED ||\n             code === CR && css.charCodeAt(pos + 1) !== NEWLINE ) {\n            offset = pos;\n            line  += 1;\n        }\n\n        switch ( code ) {\n        case NEWLINE:\n        case SPACE:\n        case TAB:\n        case CR:\n        case FEED:\n            next = pos;\n            do {\n                next += 1;\n                code = css.charCodeAt(next);\n                if ( code === NEWLINE ) {\n                    offset = next;\n                    line  += 1;\n                }\n            } while ( code === SPACE   ||\n                      code === NEWLINE ||\n                      code === TAB     ||\n                      code === CR      ||\n                      code === FEED );\n\n            tokens.push(['space', css.slice(pos, next)]);\n            pos = next - 1;\n            break;\n\n        case OPEN_SQUARE:\n            tokens.push(['[', '[', line, pos - offset]);\n            break;\n\n        case CLOSE_SQUARE:\n            tokens.push([']', ']', line, pos - offset]);\n            break;\n\n        case OPEN_CURLY:\n            tokens.push(['{', '{', line, pos - offset]);\n            break;\n\n        case CLOSE_CURLY:\n            tokens.push(['}', '}', line, pos - offset]);\n            break;\n\n        case COLON:\n            tokens.push([':', ':', line, pos - offset]);\n            break;\n\n        case SEMICOLON:\n            tokens.push([';', ';', line, pos - offset]);\n            break;\n\n        case OPEN_PARENTHESES:\n            prev = tokens.length ? tokens[tokens.length - 1][1] : '';\n            n    = css.charCodeAt(pos + 1);\n            if ( prev === 'url' && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE &&\n                                   n !== SPACE && n !== NEWLINE && n !== TAB &&\n                                   n !== FEED && n !== CR ) {\n                next = pos;\n                do {\n                    escaped = false;\n                    next    = css.indexOf(')', next + 1);\n                    if ( next === -1 ) {\n                        if ( ignore ) {\n                            next = pos;\n                            break;\n                        } else {\n                            unclosed('bracket');\n                        }\n                    }\n                    escapePos = next;\n                    while ( css.charCodeAt(escapePos - 1) === BACKSLASH ) {\n                        escapePos -= 1;\n                        escaped = !escaped;\n                    }\n                } while ( escaped );\n\n                tokens.push(['brackets', css.slice(pos, next + 1),\n                    line, pos  - offset,\n                    line, next - offset\n                ]);\n                pos = next;\n\n            } else {\n                next    = css.indexOf(')', pos + 1);\n                content = css.slice(pos, next + 1);\n\n                if ( next === -1 || RE_BAD_BRACKET.test(content) ) {\n                    tokens.push(['(', '(', line, pos - offset]);\n                } else {\n                    tokens.push(['brackets', content,\n                        line, pos  - offset,\n                        line, next - offset\n                    ]);\n                    pos = next;\n                }\n            }\n\n            break;\n\n        case CLOSE_PARENTHESES:\n            tokens.push([')', ')', line, pos - offset]);\n            break;\n\n        case SINGLE_QUOTE:\n        case DOUBLE_QUOTE:\n            quote = code === SINGLE_QUOTE ? '\\'' : '\"';\n            next  = pos;\n            do {\n                escaped = false;\n                next    = css.indexOf(quote, next + 1);\n                if ( next === -1 ) {\n                    if ( ignore ) {\n                        next = pos + 1;\n                        break;\n                    } else {\n                        unclosed('string');\n                    }\n                }\n                escapePos = next;\n                while ( css.charCodeAt(escapePos - 1) === BACKSLASH ) {\n                    escapePos -= 1;\n                    escaped = !escaped;\n                }\n            } while ( escaped );\n\n            content = css.slice(pos, next + 1);\n            lines   = content.split('\\n');\n            last    = lines.length - 1;\n\n            if ( last > 0 ) {\n                nextLine   = line + last;\n                nextOffset = next - lines[last].length;\n            } else {\n                nextLine   = line;\n                nextOffset = offset;\n            }\n\n            tokens.push(['string', css.slice(pos, next + 1),\n                line, pos  - offset,\n                nextLine, next - nextOffset\n            ]);\n\n            offset = nextOffset;\n            line   = nextLine;\n            pos    = next;\n            break;\n\n        case AT:\n            RE_AT_END.lastIndex = pos + 1;\n            RE_AT_END.test(css);\n            if ( RE_AT_END.lastIndex === 0 ) {\n                next = css.length - 1;\n            } else {\n                next = RE_AT_END.lastIndex - 2;\n            }\n            tokens.push(['at-word', css.slice(pos, next + 1),\n                line, pos  - offset,\n                line, next - offset\n            ]);\n            pos = next;\n            break;\n\n        case BACKSLASH:\n            next   = pos;\n            escape = true;\n            while ( css.charCodeAt(next + 1) === BACKSLASH ) {\n                next  += 1;\n                escape = !escape;\n            }\n            code = css.charCodeAt(next + 1);\n            if ( escape && (code !== SLASH   &&\n                            code !== SPACE   &&\n                            code !== NEWLINE &&\n                            code !== TAB     &&\n                            code !== CR      &&\n                            code !== FEED ) ) {\n                next += 1;\n            }\n            tokens.push(['word', css.slice(pos, next + 1),\n                line, pos  - offset,\n                line, next - offset\n            ]);\n            pos = next;\n            break;\n\n        default:\n            if ( code === SLASH && css.charCodeAt(pos + 1) === ASTERISK ) {\n                next = css.indexOf('*/', pos + 2) + 1;\n                if ( next === 0 ) {\n                    if ( ignore ) {\n                        next = css.length;\n                    } else {\n                        unclosed('comment');\n                    }\n                }\n\n                content = css.slice(pos, next + 1);\n                lines   = content.split('\\n');\n                last    = lines.length - 1;\n\n                if ( last > 0 ) {\n                    nextLine   = line + last;\n                    nextOffset = next - lines[last].length;\n                } else {\n                    nextLine   = line;\n                    nextOffset = offset;\n                }\n\n                tokens.push(['comment', content,\n                    line,     pos  - offset,\n                    nextLine, next - nextOffset\n                ]);\n\n                offset = nextOffset;\n                line   = nextLine;\n                pos    = next;\n\n            } else {\n                RE_WORD_END.lastIndex = pos + 1;\n                RE_WORD_END.test(css);\n                if ( RE_WORD_END.lastIndex === 0 ) {\n                    next = css.length - 1;\n                } else {\n                    next = RE_WORD_END.lastIndex - 2;\n                }\n\n                tokens.push(['word', css.slice(pos, next + 1),\n                    line, pos  - offset,\n                    line, next - offset\n                ]);\n                pos = next;\n            }\n\n            break;\n        }\n\n        pos++;\n    }\n\n    return tokens;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}