{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _CSSESC_QUOTE_OPTIONS;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nexports.unescapeValue = unescapeValue;\nvar _cssesc = require(\"cssesc\");\nvar _cssesc2 = _interopRequireDefault(_cssesc);\nvar _unesc = require(\"../util/unesc\");\nvar _unesc2 = _interopRequireDefault(_unesc);\nvar _namespace = require(\"./namespace\");\nvar _namespace2 = _interopRequireDefault(_namespace);\nvar _types = require(\"./types\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar _require = require(\"util\"),\n  deprecate = _require.deprecate;\nvar WRAPPED_IN_QUOTES = /^('|\")(.*)\\1$/;\nvar warnOfDeprecatedValueAssignment = deprecate(function () {}, \"Assigning an attribute a value containing characters that might need to be escaped is deprecated. \" + \"Call attribute.setValue() instead.\");\nvar warnOfDeprecatedQuotedAssignment = deprecate(function () {}, \"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\");\nvar warnOfDeprecatedConstructor = deprecate(function () {}, \"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");\nfunction unescapeValue(value) {\n  var deprecatedUsage = false;\n  var quoteMark = null;\n  var unescaped = value;\n  var m = unescaped.match(WRAPPED_IN_QUOTES);\n  if (m) {\n    quoteMark = m[1];\n    unescaped = m[2];\n  }\n  unescaped = (0, _unesc2.default)(unescaped);\n  if (unescaped !== value) {\n    deprecatedUsage = true;\n  }\n  return {\n    deprecatedUsage: deprecatedUsage,\n    unescaped: unescaped,\n    quoteMark: quoteMark\n  };\n}\nfunction handleDeprecatedContructorOpts(opts) {\n  if (opts.quoteMark !== undefined) {\n    return opts;\n  }\n  if (opts.value === undefined) {\n    return opts;\n  }\n  warnOfDeprecatedConstructor();\n  var _unescapeValue = unescapeValue(opts.value),\n    quoteMark = _unescapeValue.quoteMark,\n    unescaped = _unescapeValue.unescaped;\n  if (!opts.raws) {\n    opts.raws = {};\n  }\n  if (opts.raws.value === undefined) {\n    opts.raws.value = opts.value;\n  }\n  opts.value = unescaped;\n  opts.quoteMark = quoteMark;\n  return opts;\n}\nvar Attribute = function (_Namespace) {\n  _inherits(Attribute, _Namespace);\n  function Attribute() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Attribute);\n    var _this = _possibleConstructorReturn(this, _Namespace.call(this, handleDeprecatedContructorOpts(opts)));\n    _this.type = _types.ATTRIBUTE;\n    _this.raws = _this.raws || {};\n    Object.defineProperty(_this.raws, 'unquoted', {\n      get: deprecate(function () {\n        return _this.value;\n      }, \"attr.raws.unquoted is deprecated. Call attr.value instead.\"),\n      set: deprecate(function () {\n        return _this.value;\n      }, \"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")\n    });\n    _this._constructed = true;\n    return _this;\n  }\n\n  /**\n   * Returns the Attribute's value quoted such that it would be legal to use\n   * in the value of a css file. The original value's quotation setting\n   * used for stringification is left unchanged. See `setValue(value, options)`\n   * if you want to control the quote settings of a new value for the attribute.\n   *\n   * You can also change the quotation used for the current value by setting quoteMark.\n   *\n   * Options:\n   *   * quoteMark {'\"' | \"'\" | null} - Use this value to quote the value. If this\n   *     option is not set, the original value for quoteMark will be used. If\n   *     indeterminate, a double quote is used. The legal values are:\n   *     * `null` - the value will be unquoted and characters will be escaped as necessary.\n   *     * `'` - the value will be quoted with a single quote and single quotes are escaped.\n   *     * `\"` - the value will be quoted with a double quote and double quotes are escaped.\n   *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark\n   *     over the quoteMark option value.\n   *   * smart {boolean} - if true, will select a quote mark based on the value\n   *     and the other options specified here. See the `smartQuoteMark()`\n   *     method.\n   **/\n\n  Attribute.prototype.getQuotedValue = function getQuotedValue() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var quoteMark = this._determineQuoteMark(options);\n    var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];\n    var escaped = (0, _cssesc2.default)(this._value, cssescopts);\n    return escaped;\n  };\n  Attribute.prototype._determineQuoteMark = function _determineQuoteMark(options) {\n    return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);\n  };\n\n  /**\n   * Set the unescaped value with the specified quotation options. The value\n   * provided must not include any wrapping quote marks -- those quotes will\n   * be interpreted as part of the value and escaped accordingly.\n   */\n\n  Attribute.prototype.setValue = function setValue(value) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this._value = value;\n    this._quoteMark = this._determineQuoteMark(options);\n    this._syncRawValue();\n  };\n\n  /**\n   * Intelligently select a quoteMark value based on the value's contents. If\n   * the value is a legal CSS ident, it will not be quoted. Otherwise a quote\n   * mark will be picked that minimizes the number of escapes.\n   *\n   * If there's no clear winner, the quote mark from these options is used,\n   * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is\n   * true). If the quoteMark is unspecified, a double quote is used.\n   *\n   * @param options This takes the quoteMark and preferCurrentQuoteMark options\n   * from the quoteValue method.\n   */\n\n  Attribute.prototype.smartQuoteMark = function smartQuoteMark(options) {\n    var v = this.value;\n    var numSingleQuotes = v.replace(/[^']/g, '').length;\n    var numDoubleQuotes = v.replace(/[^\"]/g, '').length;\n    if (numSingleQuotes + numDoubleQuotes === 0) {\n      var escaped = (0, _cssesc2.default)(v, {\n        isIdentifier: true\n      });\n      if (escaped === v) {\n        return Attribute.NO_QUOTE;\n      } else {\n        var pref = this.preferredQuoteMark(options);\n        if (pref === Attribute.NO_QUOTE) {\n          // pick a quote mark that isn't none and see if it's smaller\n          var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;\n          var opts = CSSESC_QUOTE_OPTIONS[quote];\n          var quoteValue = (0, _cssesc2.default)(v, opts);\n          if (quoteValue.length < escaped.length) {\n            return quote;\n          }\n        }\n        return pref;\n      }\n    } else if (numDoubleQuotes === numSingleQuotes) {\n      return this.preferredQuoteMark(options);\n    } else if (numDoubleQuotes < numSingleQuotes) {\n      return Attribute.DOUBLE_QUOTE;\n    } else {\n      return Attribute.SINGLE_QUOTE;\n    }\n  };\n\n  /**\n   * Selects the preferred quote mark based on the options and the current quote mark value.\n   * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`\n   * instead.\n   */\n\n  Attribute.prototype.preferredQuoteMark = function preferredQuoteMark(options) {\n    var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;\n    if (quoteMark === undefined) {\n      quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;\n    }\n    if (quoteMark === undefined) {\n      quoteMark = Attribute.DOUBLE_QUOTE;\n    }\n    return quoteMark;\n  };\n  Attribute.prototype._syncRawValue = function _syncRawValue() {\n    var rawValue = (0, _cssesc2.default)(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);\n    if (rawValue === this._value) {\n      if (this.raws) {\n        delete this.raws.value;\n      }\n    } else {\n      this.raws.value = rawValue;\n    }\n  };\n  Attribute.prototype._handleEscapes = function _handleEscapes(prop, value) {\n    if (this._constructed) {\n      var escaped = (0, _cssesc2.default)(value, {\n        isIdentifier: true\n      });\n      if (escaped !== value) {\n        this.raws[prop] = escaped;\n      } else {\n        delete this.raws[prop];\n      }\n    }\n  };\n  Attribute.prototype._spacesFor = function _spacesFor(name) {\n    var attrSpaces = {\n      before: '',\n      after: ''\n    };\n    var spaces = this.spaces[name] || {};\n    var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};\n    return Object.assign(attrSpaces, spaces, rawSpaces);\n  };\n  Attribute.prototype._stringFor = function _stringFor(name) {\n    var spaceName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : name;\n    var concat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultAttrConcat;\n    var attrSpaces = this._spacesFor(spaceName);\n    return concat(this.stringifyProperty(name), attrSpaces);\n  };\n\n  /**\n   * returns the offset of the attribute part specified relative to the\n   * start of the node of the output string.\n   *\n   * * \"ns\" - alias for \"namespace\"\n   * * \"namespace\" - the namespace if it exists.\n   * * \"attribute\" - the attribute name\n   * * \"attributeNS\" - the start of the attribute or its namespace\n   * * \"operator\" - the match operator of the attribute\n   * * \"value\" - The value (string or identifier)\n   * * \"insensitive\" - the case insensitivity flag;\n   * @param part One of the possible values inside an attribute.\n   * @returns -1 if the name is invalid or the value doesn't exist in this attribute.\n   */\n\n  Attribute.prototype.offsetOf = function offsetOf(name) {\n    var count = 1;\n    var attributeSpaces = this._spacesFor(\"attribute\");\n    count += attributeSpaces.before.length;\n    if (name === \"namespace\" || name === \"ns\") {\n      return this.namespace ? count : -1;\n    }\n    if (name === \"attributeNS\") {\n      return count;\n    }\n    count += this.namespaceString.length;\n    if (this.namespace) {\n      count += 1;\n    }\n    if (name === \"attribute\") {\n      return count;\n    }\n    count += this.stringifyProperty(\"attribute\").length;\n    count += attributeSpaces.after.length;\n    var operatorSpaces = this._spacesFor(\"operator\");\n    count += operatorSpaces.before.length;\n    var operator = this.stringifyProperty(\"operator\");\n    if (name === \"operator\") {\n      return operator ? count : -1;\n    }\n    count += operator.length;\n    count += operatorSpaces.after.length;\n    var valueSpaces = this._spacesFor(\"value\");\n    count += valueSpaces.before.length;\n    var value = this.stringifyProperty(\"value\");\n    if (name === \"value\") {\n      return value ? count : -1;\n    }\n    count += value.length;\n    count += valueSpaces.after.length;\n    var insensitiveSpaces = this._spacesFor(\"insensitive\");\n    count += insensitiveSpaces.before.length;\n    if (name === \"insensitive\") {\n      return this.insensitive ? count : -1;\n    }\n    return -1;\n  };\n  Attribute.prototype.toString = function toString() {\n    var _this2 = this;\n    var selector = [this.rawSpaceBefore, '['];\n    selector.push(this._stringFor('qualifiedAttribute', 'attribute'));\n    if (this.operator && this.value) {\n      selector.push(this._stringFor('operator'));\n      selector.push(this._stringFor('value'));\n      selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {\n        if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {\n          attrSpaces.before = \" \";\n        }\n        return defaultAttrConcat(attrValue, attrSpaces);\n      }));\n    }\n    selector.push(']');\n    selector.push(this.rawSpaceAfter);\n    return selector.join('');\n  };\n  _createClass(Attribute, [{\n    key: \"quoted\",\n    get: function get() {\n      var qm = this.quoteMark;\n      return qm === \"'\" || qm === '\"';\n    },\n    set: function set(value) {\n      warnOfDeprecatedQuotedAssignment();\n    }\n\n    /**\n     * returns a single (`'`) or double (`\"`) quote character if the value is quoted.\n     * returns `null` if the value is not quoted.\n     * returns `undefined` if the quotation state is unknown (this can happen when\n     * the attribute is constructed without specifying a quote mark.)\n     */\n  }, {\n    key: \"quoteMark\",\n    get: function get() {\n      return this._quoteMark;\n    }\n\n    /**\n     * Set the quote mark to be used by this attribute's value.\n     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute\n     * value is updated accordingly.\n     *\n     * @param {\"'\" | '\"' | null} quoteMark The quote mark or `null` if the value should be unquoted.\n     */,\n\n    set: function set(quoteMark) {\n      if (!this._constructed) {\n        this._quoteMark = quoteMark;\n        return;\n      }\n      if (this._quoteMark !== quoteMark) {\n        this._quoteMark = quoteMark;\n        this._syncRawValue();\n      }\n    }\n  }, {\n    key: \"qualifiedAttribute\",\n    get: function get() {\n      return this.qualifiedName(this.raws.attribute || this.attribute);\n    }\n  }, {\n    key: \"insensitiveFlag\",\n    get: function get() {\n      return this.insensitive ? 'i' : '';\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n\n    /**\n     * Before 3.0, the value had to be set to an escaped value including any wrapped\n     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value\n     * is unescaped during parsing and any quote marks are removed.\n     *\n     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,\n     * a deprecation warning is raised when the new value contains any characters that would\n     * require escaping (including if it contains wrapped quotes).\n     *\n     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe\n     * how the new value is quoted.\n     */,\n\n    set: function set(v) {\n      if (this._constructed) {\n        var _unescapeValue2 = unescapeValue(v),\n          deprecatedUsage = _unescapeValue2.deprecatedUsage,\n          unescaped = _unescapeValue2.unescaped,\n          quoteMark = _unescapeValue2.quoteMark;\n        if (deprecatedUsage) {\n          warnOfDeprecatedValueAssignment();\n        }\n        if (unescaped === this._value && quoteMark === this._quoteMark) {\n          return;\n        }\n        this._value = unescaped;\n        this._quoteMark = quoteMark;\n        this._syncRawValue();\n      } else {\n        this._value = v;\n      }\n    }\n  }, {\n    key: \"attribute\",\n    get: function get() {\n      return this._attribute;\n    },\n    set: function set(name) {\n      this._handleEscapes(\"attribute\", name);\n      this._attribute = name;\n    }\n  }]);\n  return Attribute;\n}(_namespace2.default);\nAttribute.NO_QUOTE = null;\nAttribute.SINGLE_QUOTE = \"'\";\nAttribute.DOUBLE_QUOTE = '\"';\nexports.default = Attribute;\nvar CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {\n  \"'\": {\n    quotes: 'single',\n    wrap: true\n  },\n  '\"': {\n    quotes: 'double',\n    wrap: true\n  }\n}, _CSSESC_QUOTE_OPTIONS[null] = {\n  isIdentifier: true\n}, _CSSESC_QUOTE_OPTIONS);\nfunction defaultAttrConcat(attrValue, attrSpaces) {\n  return \"\" + attrSpaces.before + attrValue + attrSpaces.after;\n}","map":{"version":3,"names":["exports","__esModule","_CSSESC_QUOTE_OPTIONS","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","unescapeValue","_cssesc","require","_cssesc2","_interopRequireDefault","_unesc","_unesc2","_namespace","_namespace2","_types","obj","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","_require","deprecate","WRAPPED_IN_QUOTES","warnOfDeprecatedValueAssignment","warnOfDeprecatedQuotedAssignment","warnOfDeprecatedConstructor","deprecatedUsage","quoteMark","unescaped","m","match","handleDeprecatedContructorOpts","opts","undefined","_unescapeValue","raws","Attribute","_Namespace","arguments","_this","type","ATTRIBUTE","get","set","_constructed","getQuotedValue","options","_determineQuoteMark","cssescopts","CSSESC_QUOTE_OPTIONS","escaped","_value","smart","smartQuoteMark","preferredQuoteMark","setValue","_quoteMark","_syncRawValue","v","numSingleQuotes","replace","numDoubleQuotes","isIdentifier","NO_QUOTE","pref","quote","DOUBLE_QUOTE","quoteValue","SINGLE_QUOTE","preferCurrentQuoteMark","rawValue","_handleEscapes","prop","_spacesFor","name","attrSpaces","before","after","spaces","rawSpaces","assign","_stringFor","spaceName","concat","defaultAttrConcat","stringifyProperty","offsetOf","count","attributeSpaces","namespace","namespaceString","operatorSpaces","operator","valueSpaces","insensitiveSpaces","insensitive","toString","_this2","selector","rawSpaceBefore","push","attrValue","quoted","rawSpaceAfter","join","qm","qualifiedName","attribute","_unescapeValue2","_attribute","quotes","wrap"],"sources":["C:/Users/Francisco/Documents/GitHub/examenApi/EXAMEN-API-NOTICIAS/node_modules/tailwindcss/node_modules/postcss-selector-parser/dist/selectors/attribute.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n\nvar _CSSESC_QUOTE_OPTIONS;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.unescapeValue = unescapeValue;\n\nvar _cssesc = require(\"cssesc\");\n\nvar _cssesc2 = _interopRequireDefault(_cssesc);\n\nvar _unesc = require(\"../util/unesc\");\n\nvar _unesc2 = _interopRequireDefault(_unesc);\n\nvar _namespace = require(\"./namespace\");\n\nvar _namespace2 = _interopRequireDefault(_namespace);\n\nvar _types = require(\"./types\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = require(\"util\"),\n    deprecate = _require.deprecate;\n\nvar WRAPPED_IN_QUOTES = /^('|\")(.*)\\1$/;\n\nvar warnOfDeprecatedValueAssignment = deprecate(function () {}, \"Assigning an attribute a value containing characters that might need to be escaped is deprecated. \" + \"Call attribute.setValue() instead.\");\n\nvar warnOfDeprecatedQuotedAssignment = deprecate(function () {}, \"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\");\n\nvar warnOfDeprecatedConstructor = deprecate(function () {}, \"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");\n\nfunction unescapeValue(value) {\n    var deprecatedUsage = false;\n    var quoteMark = null;\n    var unescaped = value;\n    var m = unescaped.match(WRAPPED_IN_QUOTES);\n    if (m) {\n        quoteMark = m[1];\n        unescaped = m[2];\n    }\n    unescaped = (0, _unesc2.default)(unescaped);\n    if (unescaped !== value) {\n        deprecatedUsage = true;\n    }\n    return {\n        deprecatedUsage: deprecatedUsage,\n        unescaped: unescaped,\n        quoteMark: quoteMark\n    };\n}\n\nfunction handleDeprecatedContructorOpts(opts) {\n    if (opts.quoteMark !== undefined) {\n        return opts;\n    }\n    if (opts.value === undefined) {\n        return opts;\n    }\n    warnOfDeprecatedConstructor();\n\n    var _unescapeValue = unescapeValue(opts.value),\n        quoteMark = _unescapeValue.quoteMark,\n        unescaped = _unescapeValue.unescaped;\n\n    if (!opts.raws) {\n        opts.raws = {};\n    }\n    if (opts.raws.value === undefined) {\n        opts.raws.value = opts.value;\n    }\n    opts.value = unescaped;\n    opts.quoteMark = quoteMark;\n    return opts;\n}\n\nvar Attribute = function (_Namespace) {\n    _inherits(Attribute, _Namespace);\n\n    function Attribute() {\n        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, Attribute);\n\n        var _this = _possibleConstructorReturn(this, _Namespace.call(this, handleDeprecatedContructorOpts(opts)));\n\n        _this.type = _types.ATTRIBUTE;\n        _this.raws = _this.raws || {};\n        Object.defineProperty(_this.raws, 'unquoted', {\n            get: deprecate(function () {\n                return _this.value;\n            }, \"attr.raws.unquoted is deprecated. Call attr.value instead.\"),\n            set: deprecate(function () {\n                return _this.value;\n            }, \"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")\n        });\n        _this._constructed = true;\n        return _this;\n    }\n\n    /**\n     * Returns the Attribute's value quoted such that it would be legal to use\n     * in the value of a css file. The original value's quotation setting\n     * used for stringification is left unchanged. See `setValue(value, options)`\n     * if you want to control the quote settings of a new value for the attribute.\n     *\n     * You can also change the quotation used for the current value by setting quoteMark.\n     *\n     * Options:\n     *   * quoteMark {'\"' | \"'\" | null} - Use this value to quote the value. If this\n     *     option is not set, the original value for quoteMark will be used. If\n     *     indeterminate, a double quote is used. The legal values are:\n     *     * `null` - the value will be unquoted and characters will be escaped as necessary.\n     *     * `'` - the value will be quoted with a single quote and single quotes are escaped.\n     *     * `\"` - the value will be quoted with a double quote and double quotes are escaped.\n     *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark\n     *     over the quoteMark option value.\n     *   * smart {boolean} - if true, will select a quote mark based on the value\n     *     and the other options specified here. See the `smartQuoteMark()`\n     *     method.\n     **/\n\n\n    Attribute.prototype.getQuotedValue = function getQuotedValue() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var quoteMark = this._determineQuoteMark(options);\n        var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];\n        var escaped = (0, _cssesc2.default)(this._value, cssescopts);\n        return escaped;\n    };\n\n    Attribute.prototype._determineQuoteMark = function _determineQuoteMark(options) {\n        return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);\n    };\n\n    /**\n     * Set the unescaped value with the specified quotation options. The value\n     * provided must not include any wrapping quote marks -- those quotes will\n     * be interpreted as part of the value and escaped accordingly.\n     */\n\n\n    Attribute.prototype.setValue = function setValue(value) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        this._value = value;\n        this._quoteMark = this._determineQuoteMark(options);\n        this._syncRawValue();\n    };\n\n    /**\n     * Intelligently select a quoteMark value based on the value's contents. If\n     * the value is a legal CSS ident, it will not be quoted. Otherwise a quote\n     * mark will be picked that minimizes the number of escapes.\n     *\n     * If there's no clear winner, the quote mark from these options is used,\n     * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is\n     * true). If the quoteMark is unspecified, a double quote is used.\n     *\n     * @param options This takes the quoteMark and preferCurrentQuoteMark options\n     * from the quoteValue method.\n     */\n\n\n    Attribute.prototype.smartQuoteMark = function smartQuoteMark(options) {\n        var v = this.value;\n        var numSingleQuotes = v.replace(/[^']/g, '').length;\n        var numDoubleQuotes = v.replace(/[^\"]/g, '').length;\n        if (numSingleQuotes + numDoubleQuotes === 0) {\n            var escaped = (0, _cssesc2.default)(v, { isIdentifier: true });\n            if (escaped === v) {\n                return Attribute.NO_QUOTE;\n            } else {\n                var pref = this.preferredQuoteMark(options);\n                if (pref === Attribute.NO_QUOTE) {\n                    // pick a quote mark that isn't none and see if it's smaller\n                    var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;\n                    var opts = CSSESC_QUOTE_OPTIONS[quote];\n                    var quoteValue = (0, _cssesc2.default)(v, opts);\n                    if (quoteValue.length < escaped.length) {\n                        return quote;\n                    }\n                }\n                return pref;\n            }\n        } else if (numDoubleQuotes === numSingleQuotes) {\n            return this.preferredQuoteMark(options);\n        } else if (numDoubleQuotes < numSingleQuotes) {\n            return Attribute.DOUBLE_QUOTE;\n        } else {\n            return Attribute.SINGLE_QUOTE;\n        }\n    };\n\n    /**\n     * Selects the preferred quote mark based on the options and the current quote mark value.\n     * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`\n     * instead.\n     */\n\n\n    Attribute.prototype.preferredQuoteMark = function preferredQuoteMark(options) {\n        var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;\n\n        if (quoteMark === undefined) {\n            quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;\n        }\n\n        if (quoteMark === undefined) {\n            quoteMark = Attribute.DOUBLE_QUOTE;\n        }\n\n        return quoteMark;\n    };\n\n    Attribute.prototype._syncRawValue = function _syncRawValue() {\n        var rawValue = (0, _cssesc2.default)(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);\n        if (rawValue === this._value) {\n            if (this.raws) {\n                delete this.raws.value;\n            }\n        } else {\n            this.raws.value = rawValue;\n        }\n    };\n\n    Attribute.prototype._handleEscapes = function _handleEscapes(prop, value) {\n        if (this._constructed) {\n            var escaped = (0, _cssesc2.default)(value, { isIdentifier: true });\n            if (escaped !== value) {\n                this.raws[prop] = escaped;\n            } else {\n                delete this.raws[prop];\n            }\n        }\n    };\n\n    Attribute.prototype._spacesFor = function _spacesFor(name) {\n        var attrSpaces = { before: '', after: '' };\n        var spaces = this.spaces[name] || {};\n        var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};\n        return Object.assign(attrSpaces, spaces, rawSpaces);\n    };\n\n    Attribute.prototype._stringFor = function _stringFor(name) {\n        var spaceName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : name;\n        var concat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultAttrConcat;\n\n        var attrSpaces = this._spacesFor(spaceName);\n        return concat(this.stringifyProperty(name), attrSpaces);\n    };\n\n    /**\n     * returns the offset of the attribute part specified relative to the\n     * start of the node of the output string.\n     *\n     * * \"ns\" - alias for \"namespace\"\n     * * \"namespace\" - the namespace if it exists.\n     * * \"attribute\" - the attribute name\n     * * \"attributeNS\" - the start of the attribute or its namespace\n     * * \"operator\" - the match operator of the attribute\n     * * \"value\" - The value (string or identifier)\n     * * \"insensitive\" - the case insensitivity flag;\n     * @param part One of the possible values inside an attribute.\n     * @returns -1 if the name is invalid or the value doesn't exist in this attribute.\n     */\n\n\n    Attribute.prototype.offsetOf = function offsetOf(name) {\n        var count = 1;\n        var attributeSpaces = this._spacesFor(\"attribute\");\n        count += attributeSpaces.before.length;\n        if (name === \"namespace\" || name === \"ns\") {\n            return this.namespace ? count : -1;\n        }\n        if (name === \"attributeNS\") {\n            return count;\n        }\n\n        count += this.namespaceString.length;\n        if (this.namespace) {\n            count += 1;\n        }\n        if (name === \"attribute\") {\n            return count;\n        }\n\n        count += this.stringifyProperty(\"attribute\").length;\n        count += attributeSpaces.after.length;\n        var operatorSpaces = this._spacesFor(\"operator\");\n        count += operatorSpaces.before.length;\n        var operator = this.stringifyProperty(\"operator\");\n        if (name === \"operator\") {\n            return operator ? count : -1;\n        }\n\n        count += operator.length;\n        count += operatorSpaces.after.length;\n        var valueSpaces = this._spacesFor(\"value\");\n        count += valueSpaces.before.length;\n        var value = this.stringifyProperty(\"value\");\n        if (name === \"value\") {\n            return value ? count : -1;\n        }\n\n        count += value.length;\n        count += valueSpaces.after.length;\n        var insensitiveSpaces = this._spacesFor(\"insensitive\");\n        count += insensitiveSpaces.before.length;\n        if (name === \"insensitive\") {\n            return this.insensitive ? count : -1;\n        }\n        return -1;\n    };\n\n    Attribute.prototype.toString = function toString() {\n        var _this2 = this;\n\n        var selector = [this.rawSpaceBefore, '['];\n\n        selector.push(this._stringFor('qualifiedAttribute', 'attribute'));\n\n        if (this.operator && this.value) {\n            selector.push(this._stringFor('operator'));\n            selector.push(this._stringFor('value'));\n            selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {\n                if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {\n                    attrSpaces.before = \" \";\n                }\n                return defaultAttrConcat(attrValue, attrSpaces);\n            }));\n        }\n\n        selector.push(']');\n        selector.push(this.rawSpaceAfter);\n        return selector.join('');\n    };\n\n    _createClass(Attribute, [{\n        key: \"quoted\",\n        get: function get() {\n            var qm = this.quoteMark;\n            return qm === \"'\" || qm === '\"';\n        },\n        set: function set(value) {\n            warnOfDeprecatedQuotedAssignment();\n        }\n\n        /**\n         * returns a single (`'`) or double (`\"`) quote character if the value is quoted.\n         * returns `null` if the value is not quoted.\n         * returns `undefined` if the quotation state is unknown (this can happen when\n         * the attribute is constructed without specifying a quote mark.)\n         */\n\n    }, {\n        key: \"quoteMark\",\n        get: function get() {\n            return this._quoteMark;\n        }\n\n        /**\n         * Set the quote mark to be used by this attribute's value.\n         * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute\n         * value is updated accordingly.\n         *\n         * @param {\"'\" | '\"' | null} quoteMark The quote mark or `null` if the value should be unquoted.\n         */\n        ,\n        set: function set(quoteMark) {\n            if (!this._constructed) {\n                this._quoteMark = quoteMark;\n                return;\n            }\n            if (this._quoteMark !== quoteMark) {\n                this._quoteMark = quoteMark;\n                this._syncRawValue();\n            }\n        }\n    }, {\n        key: \"qualifiedAttribute\",\n        get: function get() {\n            return this.qualifiedName(this.raws.attribute || this.attribute);\n        }\n    }, {\n        key: \"insensitiveFlag\",\n        get: function get() {\n            return this.insensitive ? 'i' : '';\n        }\n    }, {\n        key: \"value\",\n        get: function get() {\n            return this._value;\n        }\n\n        /**\n         * Before 3.0, the value had to be set to an escaped value including any wrapped\n         * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value\n         * is unescaped during parsing and any quote marks are removed.\n         *\n         * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,\n         * a deprecation warning is raised when the new value contains any characters that would\n         * require escaping (including if it contains wrapped quotes).\n         *\n         * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe\n         * how the new value is quoted.\n         */\n        ,\n        set: function set(v) {\n            if (this._constructed) {\n                var _unescapeValue2 = unescapeValue(v),\n                    deprecatedUsage = _unescapeValue2.deprecatedUsage,\n                    unescaped = _unescapeValue2.unescaped,\n                    quoteMark = _unescapeValue2.quoteMark;\n\n                if (deprecatedUsage) {\n                    warnOfDeprecatedValueAssignment();\n                }\n                if (unescaped === this._value && quoteMark === this._quoteMark) {\n                    return;\n                }\n                this._value = unescaped;\n                this._quoteMark = quoteMark;\n                this._syncRawValue();\n            } else {\n                this._value = v;\n            }\n        }\n    }, {\n        key: \"attribute\",\n        get: function get() {\n            return this._attribute;\n        },\n        set: function set(name) {\n            this._handleEscapes(\"attribute\", name);\n            this._attribute = name;\n        }\n    }]);\n\n    return Attribute;\n}(_namespace2.default);\n\nAttribute.NO_QUOTE = null;\nAttribute.SINGLE_QUOTE = \"'\";\nAttribute.DOUBLE_QUOTE = '\"';\nexports.default = Attribute;\n\n\nvar CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {\n    \"'\": { quotes: 'single', wrap: true },\n    '\"': { quotes: 'double', wrap: true }\n}, _CSSESC_QUOTE_OPTIONS[null] = { isIdentifier: true }, _CSSESC_QUOTE_OPTIONS);\n\nfunction defaultAttrConcat(attrValue, attrSpaces) {\n    return \"\" + attrSpaces.before + attrValue + attrSpaces.after;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}